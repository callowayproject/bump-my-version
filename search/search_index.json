{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bump My Version","text":"<p>Bump My Version\u2019s purpose is to:</p> <ul> <li>Work as a part of an automated build system</li> <li>Manage project versioning through the project\u2019s development life cycle<ul> <li>Incrementing version numbers</li> <li>Serializing version numbers</li> <li>Parsing version numbers</li> <li>Support SemVer, CalVer, and other versioning schemes</li> </ul> </li> <li>Modify project files as part of the project\u2019s development life cycle</li> <li>Work with the project\u2019s source control system<ul> <li>Committing changes</li> <li>Tagging releases</li> <li>Reading version numbers from tags</li> </ul> </li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>You can download and install the latest version of this software from the Python package index (PyPI) as follows:</p> <pre><code>pip install --upgrade bump-my-version\n</code></pre>"},{"location":"CHANGELOG/","title":"Changelog","text":""},{"location":"CHANGELOG/#changelog","title":"Changelog","text":""},{"location":"CHANGELOG/#0254-2024-08-14","title":"0.25.4 (2024-08-14)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes","title":"Fixes","text":"<ul> <li> <p>Fixed terminology in tests. 0338da2</p> <p>Updated test parameter and assertion messages to use \u201cversion component\u201d instead of \u201cversion part\u201d for clarity and consistency. This change affects the test cases that detect bad or missing version inputs. - Fixed documentation layout. 57958ea</p> </li> </ul> <ul> <li> <p>Fixed inconsistent terms in docstrings. dfdf23e</p> <ul> <li>Switched from using both version parts and version components to simply version components.</li> </ul> </li> </ul> <ul> <li>Updated documentation. 5aedd64</li> </ul> <ul> <li>Removed old requirements. ec95eef</li> </ul>"},{"location":"CHANGELOG/#updates","title":"Updates","text":""},{"location":"CHANGELOG/#0253-2024-08-13","title":"0.25.3 (2024-08-13)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_1","title":"Fixes","text":"<ul> <li> <p>Refactor version parsing in visualize function. 5f25300</p> <p>Simplify the version parsing process by utilizing the raise_error parameter in the parse method, removing the need for a separate error check. This change ensures that parsing errors are immediately raised and handled cleanly within the visualize function. - Refactor and rename <code>version_part</code> to <code>versioning.version_config</code>. 5b90817</p> <p>Moved <code>version_part.py</code> to <code>versioning/version_config.py</code> and updated all import statements accordingly. Enhanced error handling in <code>VersionConfig</code> by adding <code>raise_error</code> flag and relevant exception raising for invalid version strings. Refined tests to reflect these changes. - Fix version visualization and add verbose logging. ad46978</p> <p>Raise an exception for unparsable versions and aggregate visualization output in a list before printing. Add a verbose logging option to the <code>show_bump</code> command for detailed logging control.</p> </li> </ul>"},{"location":"CHANGELOG/#0252-2024-08-11","title":"0.25.2 (2024-08-11)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_2","title":"Fixes","text":"<ul> <li> <p>Fix JSON serialization. d3f3022</p> <p>Extended the default_encoder function to handle Path objects by converting them to their string representation. This ensures that Path objects can be properly serialized to JSON format.</p> </li> </ul>"},{"location":"CHANGELOG/#0251-2024-08-07","title":"0.25.1 (2024-08-07)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_3","title":"Fixes","text":"<ul> <li>Fixes mypy pre-commit checking. f7d0909</li> </ul> <ul> <li> <p>Fixes repository path checks. ff3f72a</p> <p>Checked for relative paths when determining if the file was part of the repo or not. - Fixed test to use globs. 72f9841</p> </li> </ul>"},{"location":"CHANGELOG/#other","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 58cc73e</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.5.5 \u2192 v0.5.6</p> </li> </ul>"},{"location":"CHANGELOG/#0250-2024-08-06","title":"0.25.0 (2024-08-06)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_4","title":"Fixes","text":"<ul> <li> <p>Refactor error handling and improve logging in utils. 890b692</p> <p>Extracted error formatting to a dedicated function and applied it across the codebase. Improved command path handling in <code>add_path</code> and enhanced test coverage with necessary imports and logging configurations. - Fix dictionary merging in SCMInfo. 5fb5ef2</p> <p>Replaced the bitwise OR operator with the update method for merging dictionaries for 3.8 support - Refactor SCM info retrieval and config file update checks. 500ecd3</p> <p>Replaced ChainMap with MutableMapping in function signatures and types. Enhanced SCM info handling by splitting code into dedicated methods for commit and revision info retrieval. Added logic to prevent config file updates when the file is outside the repo and implemented corresponding test.</p> </li> </ul> <ul> <li> <p>Add repository_root field and refactor subprocess handling. 25670d0</p> <p>Introduced the <code>repository_root</code> field to store the root path of the repository in the data classes. Refactored subprocess handling to use a new <code>run_command</code> utility for improved readability and error handling consistency. Removed unnecessary dependency from <code>.pre-commit-config.yaml</code> to streamline dependencies.</p> </li> </ul> <ul> <li> <p>Simplify run_command return type. b91224e</p> <p>Changed the return type of run_command from CompletedProcess[str] to CompletedProcess. This was done to remove unnecessary type specificity and ensure compatibility with different Python versions. The update maintains functionality and improves code readability. - [pre-commit.ci] pre-commit autoupdate. e0ba544</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.5.2 \u2192 v0.5.5</p> </li> </ul>"},{"location":"CHANGELOG/#new","title":"New","text":""},{"location":"CHANGELOG/#other_1","title":"Other","text":""},{"location":"CHANGELOG/#0243-2024-07-17","title":"0.24.3 (2024-07-17)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_5","title":"Fixes","text":"<ul> <li> <p>Fix KeyError in TOML file handling. f3c328a</p> <p>The code has been updated to handle KeyErrors when updating TOML files. If a KeyError is raised, it\u2019s now caught and managed depending on the file_change attributes \u2018ignore_missing_file\u2019 or \u2018ignore_missing_version\u2019. This aims to provide more robust handling of edge cases in TOML files. In addition, a new test case has been added to ensure current version is not required in the configuration.</p> <p>Fixes #212</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 536c7b1</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.10 \u2192 v0.5.2</p> </li> </ul>"},{"location":"CHANGELOG/#other_2","title":"Other","text":""},{"location":"CHANGELOG/#0242-2024-07-03","title":"0.24.2 (2024-07-03)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_6","title":"Fixes","text":"<ul> <li> <p>Fixed tag version extraction. 67eea3d</p> <p>The output of <code>git describe</code> uses <code>-</code> as a delimiter. Parsing tags caused splits in the parsing of version numbers.</p> <p>This joins all the remaining parts of the <code>git describe</code> with a <code>-</code>. - Fixed pydoclint configuration. 0386073</p> </li> </ul>"},{"location":"CHANGELOG/#0241-2024-06-26","title":"0.24.1 (2024-06-26)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_7","title":"Fixes","text":"<ul> <li> <p>Refactor error handling in SCM and add error handling test. 7ca6356</p> <p>This commit includes a new test in test_scm.py to verify the correct formatting and raising of subprocess errors in the SCM module. Additionally, the subprocess error handling has been refactored in the SCM module to include a new method, format_and_raise_error, for improved code readability and reusability.</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 60acc2d</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.9 \u2192 v0.4.10</p> </li> </ul>"},{"location":"CHANGELOG/#other_3","title":"Other","text":""},{"location":"CHANGELOG/#0240-2024-06-25","title":"0.24.0 (2024-06-25)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#new_1","title":"New","text":"<ul> <li> <p>Add VersionNotFoundError test in test_bump.py. cb050a8</p> <p>The code in test_bump.py file has been modified to include a test for VersionNotFoundError exception. This ensures that the implementation properly handles cases where a specified version could not be found. - Add test for no commit on modification error. 7527029</p> <p>A test has been added to the bumpversion library to ensure that no commit and tag is made if there is an error modification. Specifically, the test checks the \u201cdo_bump\u201d function and asserts that \u201cmock_commit_and_tag\u201d and \u201cmock_update_config_file\u201d are not called under these conditions.</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 0e3a154</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.8 \u2192 v0.4.9</p> </li> </ul>"},{"location":"CHANGELOG/#other_4","title":"Other","text":""},{"location":"CHANGELOG/#updates_1","title":"Updates","text":"<ul> <li> <p>Improve error message for SCM command failures. 8f72f86</p> <p>The error message for failures in the SCM command execution has been enhanced. Now it displays not only the command\u2019s return code but also the standard output and error, improving the debugging process.</p> </li> </ul>"},{"location":"CHANGELOG/#0230-2024-06-14","title":"0.23.0 (2024-06-14)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_8","title":"Fixes","text":"<ul> <li> <p>Refactor valid_bumps and invalid_bumps to include_bumps and exclude_bumps. 2df57cc</p> <p>The configuration parameters <code>valid_bumps</code> and <code>invalid_bumps</code> were renamed to <code>include_bumps</code> and <code>exclude_bumps</code> respectively. This new naming better denotes their function, and the changes were consistently applied across all related files and tests. Numerous fixture outputs were also updated to reflect these changes. - Fixed spelling in CODE_OF_CONDUCT.md. 254ea44</p> </li> </ul>"},{"location":"CHANGELOG/#new_2","title":"New","text":"<ul> <li> <p>Add file filtering based on valid and invalid bumps. f9f7f96</p> <p>This commit introduces the ability to filter files based on whether the specified bump type is valid or not. It adds <code>valid_bumps</code> and <code>invalid_bumps</code> lists in the file configurations and adjusts the bumping process to consider these configurations. Tests are updated to reflect these new handling of valid and invalid bumps. - Add new files to .gitignore. 34e4dc1</p> <p>Several new file types have been added to .gitignore for ignoring during commits. These include \u2018.python-version\u2019, \u2018requirements-dev.lock\u2019, and \u2018requirements.lock\u2019 files. - Add valid_bumps and invalid_bumps to file configuration. 9458851</p> <p>Updated the configuration file model to support valid_bumps and invalid_bumps. This feature provides control over which version section updates can trigger file changes. Adjusted various test fixtures and cleaned up tests to match these changes. Also, some updates were made to the documentation accordingly.</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e44f6af</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.4 \u2192 v0.4.8</p> </li> </ul>"},{"location":"CHANGELOG/#other_5","title":"Other","text":""},{"location":"CHANGELOG/#updates_2","title":"Updates","text":"<ul> <li> <p>Update documentation for clarification. 2224808</p> <p>The changes made update the wording in the documentation to clarify the roles of <code>include_bumps</code> and <code>exclude_bumps</code> in the bump-my-version configuration. Additionally, unnecessary repetition was removed and overlapping examples were also corrected. - Update docs/reference/configuration.md. 7c801c0</p> <p>co-authored-by: wkoot 3715211+wkoot@users.noreply.github.com</p> </li> </ul>"},{"location":"CHANGELOG/#0220-2024-06-11","title":"0.22.0 (2024-06-11)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#new_3","title":"New","text":"<ul> <li> <p>Add extensive documentation for the \u2018show\u2019 subcommand. 91409d8</p> <p>This commit adds extensive documentation for the <code>show</code> subcommand in the program\u2019s reference. It also includes smaller updates and corrections to other parts of the documentation. An in-depth example usage of <code>show</code> is added both to the dedicated <code>show.md</code> file and in the function\u2019s docstring.</p> </li> </ul> <ul> <li>Renamed version workflow to release. 68f9eee</li> </ul>"},{"location":"CHANGELOG/#updates_3","title":"Updates","text":""},{"location":"CHANGELOG/#0211-2024-05-16","title":"0.21.1 (2024-05-16)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#other_6","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 1b57c2b</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. e813eda</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.3 \u2192 v0.4.4</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 05a0dd6</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.2 \u2192 v0.4.3</p> </li> </ul>"},{"location":"CHANGELOG/#updates_4","title":"Updates","text":"<ul> <li>Update README.md. cad7096</li> </ul>"},{"location":"CHANGELOG/#0210-2024-05-01","title":"0.21.0 (2024-05-01)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_9","title":"Fixes","text":"<ul> <li> <p>Fixed a bug in the glob tests. 1041fe9</p> <p>Was not properly looking in the correct relative directories. - Fixed test for Windows glob paths. ea45c4c</p> </li> </ul> <ul> <li>Fixed exclusion logic with wcmatch. 1c391be</li> </ul> <ul> <li>Refactored glob matching to use the wcmatch library. bbf4ae0</li> </ul>"},{"location":"CHANGELOG/#new_4","title":"New","text":"<ul> <li> <p>Adds <code>glob_exclude</code> file specification parameter. 420e3bd</p> <p>User can prune the files resolved via the <code>glob</code> parameter.</p> <p>Fixes #184</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. ce02aa7</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.4.1 \u2192 v0.4.2</p> </li> </ul>"},{"location":"CHANGELOG/#other_7","title":"Other","text":""},{"location":"CHANGELOG/#0203-2024-04-26","title":"0.20.3 (2024-04-26)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_10","title":"Fixes","text":"<ul> <li>Fixed test logging setup. 3777f27</li> </ul> <ul> <li> <p>Fixed the indentation problem. ec3cd99</p> <ul> <li>Added a dedent when a file does not match the change pattern.</li> <li>Fixes #181</li> </ul> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e916f87</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.3.7 \u2192 v0.4.1</p> </li> </ul>"},{"location":"CHANGELOG/#other_8","title":"Other","text":""},{"location":"CHANGELOG/#0202-2024-04-23","title":"0.20.2 (2024-04-23)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_11","title":"Fixes","text":"<ul> <li> <p>Fixed the rendering of numeric version components. c522c75</p> <ul> <li>Numeric version components now will attempt to render its value as an integer and fall back to the parsed value.</li> <li>Fixed code block in the README. b4ff9f3</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#other_9","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 9b09da8</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.3.5 \u2192 v0.3.7</p> </li> </ul>"},{"location":"CHANGELOG/#0201-2024-04-13","title":"0.20.1 (2024-04-13)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_12","title":"Fixes","text":"<ul> <li>Fix typos discovered by codespell. d5c33a3</li> </ul> <ul> <li>Fixed relative references. 2aa1011</li> </ul> <ul> <li>Refactored the docs. b63a9e7</li> </ul>"},{"location":"CHANGELOG/#other_10","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. f438bc6</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.3.4 \u2192 v0.3.5</p> </li> </ul> <ul> <li> <p>Pre-commit: Discover typos with codespell. 2509fc7</p> <p>Related to: * #168 - [pre-commit.ci] pre-commit autoupdate. be5cb79</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.3.3 \u2192 v0.3.4</p> </li> </ul>"},{"location":"CHANGELOG/#0200-2024-03-27","title":"0.20.0 (2024-03-27)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_13","title":"Fixes","text":"<ul> <li>Refactored context into its own module. 5a3e05d</li> </ul>"},{"location":"CHANGELOG/#new_5","title":"New","text":"<ul> <li> <p>Added <code>always_increment</code> attribute for parts. 53ee848</p> <p>This is a requirement for CalVer to ensure they always increment with each bump, but it will work for any type. - Added CalVer function and formatting. 7a0e639</p> <ul> <li>Version parts now have a <code>calver_format</code> attribute for CalVer parts.</li> </ul> </li> </ul> <ul> <li>Updated the documentation. 607609d</li> </ul>"},{"location":"CHANGELOG/#updates_5","title":"Updates","text":""},{"location":"CHANGELOG/#0193-2024-03-23","title":"0.19.3 (2024-03-23)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_14","title":"Fixes","text":"<ul> <li>Fixed packaging of dev releases. 84254e0</li> </ul> <ul> <li> <p>Fixed platform-dependent encoding. f8b4d65</p> <ul> <li>Added <code>encoding=\"utf-8\"</code> to all writes.</li> <li>Fixed version.yaml workflow. 10b007c</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#other_11","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e92000a</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.3.2 \u2192 v0.3.3</p> </li> </ul> <ul> <li> <p>Bump the github-actions group with 3 updates. a422c58</p> <p>Bumps the github-actions group with 3 updates: actions/checkout, actions/setup-python and codecov/codecov-action.</p> <p>Updates <code>actions/checkout</code> from 3 to 4 - Release notes - Changelog - Commits</p> <p>Updates <code>actions/setup-python</code> from 4 to 5 - Release notes - Commits</p> <p>Updates <code>codecov/codecov-action</code> from 3 to 4 - Release notes - Changelog - Commits</p> <p>updated-dependencies: - dependency-name: actions/checkout dependency-type: direct:production update-type: version-update:semver-major dependency-group: github-actions</p> <p>signed-off-by: dependabot[bot] support@github.com</p> </li> </ul> <ul> <li> <p>Keep GitHub Actions up to date with GitHub\u2019s Dependabot. 2e55fa1</p> <ul> <li>https://docs.github.com/en/code-security/dependabot/working-with-dependabot/keeping-your-actions-up-to-date-with-dependabot</li> <li>https://docs.github.com/en/code-security/dependabot/dependabot-version-updates/configuration-options-for-the-dependabot.yml-file#package-ecosystem</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#0192-2024-03-16","title":"0.19.2 (2024-03-16)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_15","title":"Fixes","text":"<ul> <li> <p>Fixed bad options not returning an error code. e88f0a9</p> <p>Fixes #153 - Fix issue on version.yaml. 7d14065</p> </li> </ul>"},{"location":"CHANGELOG/#0191-2024-03-16","title":"0.19.1 (2024-03-16)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_16","title":"Fixes","text":"<ul> <li>Fix commas in legacy multiline options. 62dfe8e</li> </ul>"},{"location":"CHANGELOG/#new_6","title":"New","text":"<ul> <li>Added manual version bumping in the GitHub action. c9d67b5</li> </ul>"},{"location":"CHANGELOG/#other_12","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. be1a568</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.2.2 \u2192 v0.3.2</p> </li> </ul>"},{"location":"CHANGELOG/#0190-2024-03-12","title":"0.19.0 (2024-03-12)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_17","title":"Fixes","text":"<ul> <li>Fixing version hint generation. ae1732b</li> </ul>"},{"location":"CHANGELOG/#updates_6","title":"Updates","text":"<ul> <li> <p>Removes ability to call the CLI without subcommand. e56c944</p> <p>BREAKING CHANGE: You must use bump-my-version bump</p> </li> </ul>"},{"location":"CHANGELOG/#0183-2024-02-25","title":"0.18.3 (2024-02-25)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_18","title":"Fixes","text":"<ul> <li> <p>Fixed \u2013ignore-missing-version and \u2013ignore-missing-files options. 7635873</p> <p>The CLI options were defaulting to <code>False</code> when missing. This overrode the configuration.</p> <p>Fixes #140</p> </li> </ul>"},{"location":"CHANGELOG/#0182-2024-02-25","title":"0.18.2 (2024-02-25)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_19","title":"Fixes","text":"<ul> <li>Fixed docs and cli help. 8ac1087</li> </ul>"},{"location":"CHANGELOG/#0181-2024-02-24","title":"0.18.1 (2024-02-24)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_20","title":"Fixes","text":"<ul> <li>Fixed type annotation in config. 2988ede</li> </ul> <ul> <li> <p>Fixed naming issue for docs. 2850aa7</p> <ul> <li>renamed changelog.md and contributing.md</li> </ul> </li> </ul> <ul> <li> <p>Added how-to doc. 68643a9</p> <ul> <li>\u201cHow to update a date in a file\u201d</li> </ul> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. c495d3d</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.2.1 \u2192 v0.2.2</p> </li> </ul>"},{"location":"CHANGELOG/#new_7","title":"New","text":""},{"location":"CHANGELOG/#other_13","title":"Other","text":""},{"location":"CHANGELOG/#updates_7","title":"Updates","text":"<ul> <li>Updated docs and styles. f4f75fa</li> </ul>"},{"location":"CHANGELOG/#0180-2024-02-18","title":"0.18.0 (2024-02-18)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#new_8","title":"New","text":"<ul> <li>Added <code>--ignore-missing-files</code> option to bump. fcfaac7</li> </ul> <ul> <li>Added configuration option <code>ignore_missing_files</code>. b473a19</li> </ul>"},{"location":"CHANGELOG/#other_14","title":"Other","text":"<ul> <li>Convert docs to MkDocs. f805c33</li> </ul> <ul> <li>Converted documentation to use MkDocs. 1b8c6b3</li> </ul>"},{"location":"CHANGELOG/#0174-2024-02-10","title":"0.17.4 (2024-02-10)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_21","title":"Fixes","text":"<ul> <li>Fixed linting errors. 9515afc</li> </ul> <ul> <li> <p>Fix encoding when reading text. c03476a</p> <p>Fixes #68</p> </li> </ul>"},{"location":"CHANGELOG/#other_15","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 491b4aa</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.14 \u2192 v0.2.0</p> </li> </ul>"},{"location":"CHANGELOG/#0173-2024-01-29","title":"0.17.3 (2024-01-29)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_22","title":"Fixes","text":"<ul> <li> <p>Refactored VersionComponentConfig to VersionComponentSpec. b538308</p> <p>More consistent with VersionSpec</p> </li> </ul>"},{"location":"CHANGELOG/#new_9","title":"New","text":"<ul> <li>Added mental model documentation. 5cbd250</li> </ul>"},{"location":"CHANGELOG/#other_16","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. a2a3fe6</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.11 \u2192 v0.1.14</p> </li> </ul>"},{"location":"CHANGELOG/#updates_8","title":"Updates","text":"<ul> <li>Updated more documentation. 779c84c</li> </ul>"},{"location":"CHANGELOG/#0172-2024-01-27","title":"0.17.2 (2024-01-27)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_23","title":"Fixes","text":"<ul> <li>Fixed some tests. 593a4ee</li> </ul> <ul> <li> <p>Refactored serialization. 0ac2cd8</p> <ul> <li>Moved serialization from VersionConfig to version.serialization</li> <li>Fixed extra capture group in PEP440 parser. 384fd99</li> </ul> </li> </ul> <ul> <li> <p>Refactored verioning models. 88e7f71</p> <ul> <li>created a \u201cconventions\u201d module for future release</li> <li>added an optional <code>depends_on</code> version component configuration</li> <li>The <code>depends_on</code> is required for PEP440 versioning</li> <li>Fixed None as value for a function. f8c4d05</li> </ul> <ul> <li>Turns None into an empty string</li> <li>Fixed bad imports. 5c86d51</li> </ul> </li> </ul> <ul> <li>Refactored versioning models and tests. 7d05414</li> </ul> <ul> <li>Refactored version parsing. 5ed546b</li> </ul> <ul> <li>Refactored versioning functions and version parts. be87721</li> </ul> <ul> <li>Fixed timezone of a test. 0e01253</li> </ul>"},{"location":"CHANGELOG/#0171-2024-01-25","title":"0.17.1 (2024-01-25)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_24","title":"Fixes","text":"<ul> <li>Fixed bad error checking with SCM. 10e5d7d</li> </ul> <ul> <li>Fix missing current version within the context. a5dca4c</li> </ul>"},{"location":"CHANGELOG/#0170-2024-01-22","title":"0.17.0 (2024-01-22)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_25","title":"Fixes","text":"<ul> <li>Fixed Py3.8 type annotation. c15b23b</li> </ul> <ul> <li>Fixed some output in visualizing. 406f97a</li> </ul> <ul> <li>Fixed bad type annotation. 8f4bedf</li> </ul> <ul> <li>Fixed bad test imports. a74342b</li> </ul> <ul> <li> <p>Refactored the create subcommand. f529d28</p> <ul> <li>Also organized the CLI tests</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new_10","title":"New","text":"<ul> <li> <p>Added <code>show-bump</code> subcommand. 0bbd814</p> <ul> <li>Shows possible resulting versions of the <code>bump</code> command</li> <li>Added sample-config feature. 3d0f67d</li> </ul> <ul> <li>Initial implementation</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#updates_9","title":"Updates","text":"<ul> <li>Updated documentation. 4f90348</li> </ul>"},{"location":"CHANGELOG/#0162-2024-01-13","title":"0.16.2 (2024-01-13)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_26","title":"Fixes","text":"<ul> <li>Fixed a bad import. 46c9c48</li> </ul> <ul> <li> <p>Fixed extra whitespace added when updating pyproject.toml. 839f17f</p> <ul> <li>Removed dotted-notation from requirements. There is an issue on how dotted-notation sets values in the TOMLkit data structure.</li> </ul> <ul> <li>Added <code>get_nested_value</code> and <code>set_nested_value</code> as replacements for dotted-notation.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#other_17","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. ee4d2f3</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.9 \u2192 v0.1.11</p> </li> </ul>"},{"location":"CHANGELOG/#0161-2024-01-06","title":"0.16.1 (2024-01-06)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_27","title":"Fixes","text":"<ul> <li> <p>Fixed empty string replacement bug. d9965ab</p> <p>Only a missing replacement value will trigger one of the fallback options.</p> <p>Fixes #117</p> </li> </ul>"},{"location":"CHANGELOG/#0160-2024-01-05","title":"0.16.0 (2024-01-05)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#new_11","title":"New","text":"<ul> <li>Add support for legacy multiline search options (refs #98). 278eae5</li> </ul>"},{"location":"CHANGELOG/#other_18","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 2e9a400</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.7 \u2192 v0.1.9</p> </li> </ul>"},{"location":"CHANGELOG/#0154-2023-12-29","title":"0.15.4 (2023-12-29)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_28","title":"Fixes","text":"<ul> <li>Fix not being able to tag without also committing. 753c990</li> </ul> <ul> <li> <p>Fixed testing automation. 19215f1</p> <ul> <li>The new commit/tag decoupling requires the <code>--no-tag</code> flag</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#0153-2023-12-18","title":"0.15.3 (2023-12-18)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_29","title":"Fixes","text":"<ul> <li> <p>Fix miscast of current_version. b8ea252</p> <ul> <li>When using the legacy configuration format, a single-digit version is parsed as an int</li> </ul> <p>Fixes #99</p> </li> </ul>"},{"location":"CHANGELOG/#0152-2023-12-18","title":"0.15.2 (2023-12-18)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_30","title":"Fixes","text":"<ul> <li> <p>Fixed regression in config update. 2bbbd74</p> <p>Fixes #108</p> </li> </ul>"},{"location":"CHANGELOG/#new_12","title":"New","text":"<ul> <li>Added a test case for line-start regexes. ef4823c</li> </ul>"},{"location":"CHANGELOG/#0151-2023-12-18","title":"0.15.1 (2023-12-18)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_31","title":"Fixes","text":"<ul> <li>Fixes workflow triggers. 690452e</li> </ul> <ul> <li>Fixes mismatched artifact up/downloading versions. 3f61742</li> </ul> <ul> <li>Fixed PR_NUMBER retrieval. 85a8b48</li> </ul> <ul> <li>Fixes committing and download-artifact. 12ba54f</li> </ul> <ul> <li>Refactored workflows. d2f30a8</li> </ul>"},{"location":"CHANGELOG/#other_19","title":"Other","text":"<ul> <li>Testing PR acquisition. 67ab83d</li> </ul> <ul> <li>Put in temporary debugging steps. 6ac064e</li> </ul>"},{"location":"CHANGELOG/#updates_10","title":"Updates","text":"<ul> <li>Changed the triggers to cause runs. 23e6c18</li> </ul>"},{"location":"CHANGELOG/#0150-2023-12-16","title":"0.15.0 (2023-12-16)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_32","title":"Fixes","text":"<ul> <li>Fixed requirements for github action. d96e07a</li> </ul>"},{"location":"CHANGELOG/#updates_11","title":"Updates","text":"<ul> <li> <p>Changed default regex CLI value to None. 93191f3</p> <p>Fixes #64</p> <p>The default value of False was overriding other values.</p> </li> </ul>"},{"location":"CHANGELOG/#0140-2023-12-15","title":"0.14.0 (2023-12-15)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_33","title":"Fixes","text":"<ul> <li>Fixed issue when adding files. 84556f8</li> </ul> <ul> <li>Fixed missing requirement in GH action. 42bab83</li> </ul> <ul> <li> <p>Fixed regression regarding multiple changes in one file. e7a7629</p> <p>Changed the method of marking changes from a dict keyed by the file name to a list of FileChanges.</p> <p>FileChanges encapsulate a single change to a file. - Refactored logging to provide indented output. 4e68214</p> </li> </ul> <ul> <li> <p>Refactored FileConfig to FileChange. 249a999</p> <p>This better describes what the class does: describe a file change.</p> <p>Also moved <code>get_search_pattern</code> to the class, since it is specific to each instance - Refactored config file management. a4c90b2</p> <p>Moved the INI format stuff into files_legacy.py - Fixes generate-requirements.sh to upgrade. 121ef69</p> </li> </ul>"},{"location":"CHANGELOG/#new_13","title":"New","text":"<ul> <li>Added caching to the resolved filemap. c96e0bd</li> </ul> <ul> <li>Added custom GitHub action. 4ce17a9</li> </ul> <ul> <li>Added indented logger to improve console output. d1d19e3</li> </ul>"},{"location":"CHANGELOG/#updates_12","title":"Updates","text":"<ul> <li> <p>Changed the management of file changes. 909396d</p> <p>File changes are hashable to weed out duplication. - Removed some commented lines. 89686b8</p> </li> </ul>"},{"location":"CHANGELOG/#0130-2023-12-06","title":"0.13.0 (2023-12-06)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_34","title":"Fixes","text":"<ul> <li>Fixed import of extract_regex_flags. a980670</li> </ul> <ul> <li>Fixed logging and regex regression in 3.11. cae12dc</li> </ul> <ul> <li> <p>Fixed issue with tag name. e218264</p> <p>Fixes #74</p> <p>current_version and tag_name now do not need to match exactly - Fixed logic in auto bump workflow. 909a53f</p> </li> </ul> <ul> <li> <p>Fixes https://github.com/callowayproject/bump-my-version/issues/85. 97049e0</p> <p>HG returns the tags in the order they were created so we want the last one in the list - Fixed autoversioning. a308a35</p> </li> </ul>"},{"location":"CHANGELOG/#new_14","title":"New","text":"<ul> <li> <p>Added key_path to FileConfig. e160b40</p> <ul> <li>Also made all attributes required except <code>filename</code>, <code>glob</code>, and <code>key_path</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#other_20","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 8188a42</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. 4c81ad4</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.3 \u2192 v0.1.5</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 7109d70</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.1.3 \u2192 v0.1.6</p> </li> </ul>"},{"location":"CHANGELOG/#updates_13","title":"Updates","text":"<ul> <li> <p>Refactored configuration file updating. e407974</p> <p>TOML files are parsed, specific values are updated, and re-written to avoid updating the wrong data.</p> <p>It uses a two-way parser, so all formatting and comments are maintained.</p> <p>INI-type configuration files use the old way, since that format is deprecated.</p> </li> </ul>"},{"location":"CHANGELOG/#0120-2023-11-04","title":"0.12.0 (2023-11-04)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_35","title":"Fixes","text":"<ul> <li>Fixed versioning. 8769671</li> </ul> <ul> <li>Fix dev versioning with PR number. 463082b</li> </ul> <ul> <li> <p>Fix dev versioning. 1eed99b</p> <ul> <li>added an echo of the PR_NUMBER</li> <li>Fix versioning of development versions. e89599f</li> </ul> </li> </ul> <ul> <li>Fixes workflows. 5ebb0d7</li> </ul> <ul> <li>Fixed bug #65 where glob\u2019d files weren\u2019t used. 357b9dc</li> </ul>"},{"location":"CHANGELOG/#new_15","title":"New","text":"<ul> <li> <p>Add -h for help option. fda71b0</p> <p>Fixes #67</p> </li> </ul>"},{"location":"CHANGELOG/#other_21","title":"Other","text":"<ul> <li> <p>Drop Python3.7 as compatible version. 890edc8</p> <p>Since this is no longer tested, it\u2019s safer to start at 3.8. - [pre-commit.ci] auto fixes from pre-commit.com hooks. fbcef03</p> <p>for more information, see https://pre-commit.ci - Recommend calling \u2018bump-my-version\u2019 instead of \u2018bumpversion\u2019. 9fb1a1d</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e2579d6</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.290 \u2192 v0.0.292</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. e21fdd9</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.290 \u2192 v0.1.1</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 7e5d1bc</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.290 \u2192 v0.1.3</p> </li> </ul>"},{"location":"CHANGELOG/#updates_14","title":"Updates","text":"<ul> <li> <p>Changed the default regex search to non-regex. 0034716</p> <p>Fixes #59</p> <ul> <li>Changed the flags to \u2013regex/\u2013no-regex</li> <li>updated tests and docs</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#0110-2023-09-26","title":"0.11.0 (2023-09-26)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#other_22","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 4a3d046</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.285 \u2192 v0.0.290</p> </li> </ul>"},{"location":"CHANGELOG/#updates_15","title":"Updates","text":"<ul> <li>Removed bumpversion as a duplicate of the bump-my-version script. a59ced8</li> </ul> <ul> <li>Updated dependency from Pydantic 1 to 2. 577aa4c</li> </ul>"},{"location":"CHANGELOG/#0100-2023-09-05","title":"0.10.0 (2023-09-05)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#updates_16","title":"Updates","text":"<ul> <li> <p>Refactored file resolution, inclusion, and exclusion. 646af54</p> <ul> <li>Fixes #61</li> <li>Config now includes <code>resolved_filemap</code> property</li> <li>resolved filemap expands all globs</li> <li>Config now includes <code>files_to_modify</code> property</li> <li>files to modify resolves inclusions and exclutions</li> <li>Improved Config.add_files property</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#093-2023-08-25","title":"0.9.3 (2023-08-25)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_36","title":"Fixes","text":"<ul> <li> <p>Fixed file configuration overrides. c1ef3b2</p> <p>Fixes #55</p> <p>The file config was ignoring falsey values when constructing the dict.</p> <p>It now ignores <code>None</code> values. - Fixed documentation regarding regex config. cd71a1a</p> <ul> <li>TOML requires the double backslash while INI doesn\u2019t</li> <li>Fixed requirements for docs. 7856ee0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new_16","title":"New","text":"<ul> <li>Added documentation building workflow. 48980d7</li> </ul>"},{"location":"CHANGELOG/#other_23","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 7c38c40</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.284 \u2192 v0.0.285</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. c30bd12</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.282 \u2192 v0.0.284</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 95c89fb</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.281 \u2192 v0.0.282</p> </li> </ul>"},{"location":"CHANGELOG/#updates_17","title":"Updates","text":"<ul> <li>Removed mentions of Python 3.7. a91f690</li> </ul>"},{"location":"CHANGELOG/#092-2023-08-07","title":"0.9.2 (2023-08-07)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_37","title":"Fixes","text":"<ul> <li> <p>Fixed modified context when committing. 130bbe0</p> <ul> <li>Resets the context before committing and tagging</li> <li>Fixes #14</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#091-2023-08-03","title":"0.9.1 (2023-08-03)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#other_24","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 4b457d0</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. adb7e4c</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.277 \u2192 v0.0.281</p> </li> </ul>"},{"location":"CHANGELOG/#updates_18","title":"Updates","text":"<ul> <li> <p>Remove <code>pygments_style</code> from docsrc/conf.py. 32798a9</p> <p>The theme defaults, subjectively, look better.</p> </li> </ul>"},{"location":"CHANGELOG/#090-2023-08-03","title":"0.9.0 (2023-08-03)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#new_17","title":"New","text":"<ul> <li>Added documentation about regular expressions. 449b70a</li> </ul> <ul> <li> <p>Added configuration and command-line <code>no_regex</code> option. a295a32</p> <ul> <li>Global and individual file configurations available for <code>no_regex</code></li> <li>Command-line flag <code>--no-regex</code> flag added for <code>bump</code> and <code>replace</code> sub-commands</li> <li>Adds regular expression searching ability. 0210d74</li> </ul> <ul> <li>Search strings are treated as regular expressions after the initial substitution</li> <li>Added deprecation warning on .cfg files. a0481b7</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#080-2023-07-13","title":"0.8.0 (2023-07-13)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#new_18","title":"New","text":"<ul> <li>Added documentation for ignore missing version. e0731c3</li> </ul> <ul> <li>Added <code>--ignore-missing-version</code> flag to <code>bump</code> and <code>replace</code>. a5bd008</li> </ul> <ul> <li> <p>Added <code>ignore-missing-version</code> configuration. 45c85be</p> <ul> <li>Defaults to <code>False</code></li> <li>File configurations can also override this value</li> <li>Added deprecation warnings. 733438b</li> </ul> <ul> <li><code>--list</code> option will go bye-bye in 1.0</li> <li>calling <code>bumpversion</code> without a subcomand will leave in 1.0</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#071-2023-07-12","title":"0.7.1 (2023-07-12)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_38","title":"Fixes","text":"<ul> <li> <p>Fix search and replace options for replace. 781e8d8</p> <ul> <li>The <code>--search</code> and <code>--replace</code> options now completely override any other search and replace logic.</li> </ul> <p>Fixes #34</p> </li> </ul>"},{"location":"CHANGELOG/#other_25","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 531738d</p> <p>updates: - github.com/astral-sh/ruff-pre-commit: v0.0.276 \u2192 v0.0.277</p> </li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. 61e6747</p> <p>updates: - https://github.com/charliermarsh/ruff-pre-commit \u2192 https://github.com/astral-sh/ruff-pre-commit</p> </li> </ul>"},{"location":"CHANGELOG/#070-2023-07-10","title":"0.7.0 (2023-07-10)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_39","title":"Fixes","text":"<ul> <li>Fixed test coverage. 3fe96f0</li> </ul> <ul> <li>Fixed wrong pydantic version pinning. d4b125e</li> </ul> <ul> <li> <p>Fixed typing issue. bfe5306</p> <ul> <li>Declared SourceCodeManager attributes as <code>ClassVar[List[str]]</code></li> <li><code>_TEST_USABLE_COMMAND</code>, <code>_COMMIT_COMMAND</code>, and <code>_ALL_TAGS_COMMAND</code> affected</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new_19","title":"New","text":"<ul> <li>Added tests for CLI replace command. a53cddc</li> </ul> <ul> <li>Added and re-organized documentation. c62d65e</li> </ul> <ul> <li> <p>Added replace subcommand. 8722a0f</p> <ul> <li>Works just like <code>bump</code> but<ul> <li>doesn\u2019t do any version incrementing</li> <li>Will not change the configuration file</li> <li>Will not commit or tag</li> </ul> </li> </ul> <ul> <li>Can use <code>bumpversion show new_version --increment &lt;versionpart&gt;</code> to see what the new version would be</li> <li>Adds <code>short_branch_name</code> to version rendering context. 7f7e50c</li> </ul> <ul> <li><code>short_branch_name</code> is the branch name, lower case, containing only a-z and 0-9, and truncated to 20 characters.</li> </ul> <p>Fixes #28</p> </li> </ul>"},{"location":"CHANGELOG/#other_26","title":"Other","text":"<ul> <li>Check config before tagging. 3a6e3ee</li> </ul> <ul> <li>Format version parts. ee43bdb</li> </ul> <ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 5e6f566</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. f1acd35</p> <p>updates: - github.com/charliermarsh/ruff-pre-commit: v0.0.272 \u2192 v0.0.275</p> </li> </ul>"},{"location":"CHANGELOG/#060-2023-06-23","title":"0.6.0 (2023-06-23)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_40","title":"Fixes","text":"<ul> <li> <p>Fixed <code>--help</code> and <code>bump</code> invocations. 9d965e5</p> <ul> <li><code>--help</code> works for individual sub-commands, but not for the command</li> <li><code>bump</code> now works and fixed tests</li> <li>Fixed issue regarding TOML types. 8960d24</li> </ul> <ul> <li><code>tomlkit.parse()</code> returns a <code>TOMLDocument</code>.</li> <li><code>unwrap()</code> converts it into a <code>dict</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new_20","title":"New","text":"<ul> <li>Adds <code>branch_name</code> to SCM information. 173be1a</li> </ul> <ul> <li>Added documentation for the show command. d537274</li> </ul> <ul> <li> <p>Adds <code>--increment</code> option to <code>show</code> subcommand. b01fffc</p> <ul> <li>when specified it increments the current version and adds <code>new_version</code> to the available output.</li> <li>Added <code>show</code> subcommand. 9bce887</li> </ul> <ul> <li>supersedes the <code>--list</code> option</li> <li>provides much more capability</li> <li>Can output in YAML, JSON, and default</li> <li>Can specify one or more items to display</li> <li>Can use dotted-notation to pull items from nested data structures.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#updates_19","title":"Updates","text":"<ul> <li> <p>Changes bump-my-version into subcommands. 31ffbcf</p> <ul> <li>Is backwards-compatible with previous versions</li> <li><code>bump-my-version</code> forwards command to <code>bump-my-version bump</code> subcommand</li> <li>Only problem is that Click will not show help automatically, must provide <code>--help</code></li> </ul> </li> </ul>"},{"location":"CHANGELOG/#051-2023-06-14","title":"0.5.1 (2023-06-14)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_41","title":"Fixes","text":"<ul> <li> <p>Fixes reporting the wrong version missing in a file. efb04e9</p> <ul> <li>Fixes issue #20</li> <li>Renders the correct <code>current_version</code> for each file being modified.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#other_27","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 5476cdf</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. 6e500c2</p> <p>updates: - github.com/charliermarsh/ruff-pre-commit: v0.0.270 \u2192 v0.0.272</p> </li> </ul>"},{"location":"CHANGELOG/#050-2023-06-12","title":"0.5.0 (2023-06-12)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_42","title":"Fixes","text":"<ul> <li>Fixed ruff complaints about subprocess. c429c68</li> </ul> <ul> <li> <p>Fixed issue with formatting. da7544f</p> <p>There is an underlying edge case where the deriving previous environment variables with multiple ways of formatting version numbers will fail.</p> </li> </ul> <ul> <li>Add test to reproduce issue #14. d78ff46</li> </ul> <ul> <li> <p>Added documentation for replacing strings in different files. 893ec03</p> <p>Fixes #6</p> </li> </ul>"},{"location":"CHANGELOG/#new_21","title":"New","text":""},{"location":"CHANGELOG/#other_28","title":"Other","text":"<ul> <li> <p>Made <code>VERSION_PART</code> optional. f236b7d</p> <ul> <li>Fixes #16</li> <li><code>VERSION_PART</code> is detected from the arguments based on the configuration</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#updates_20","title":"Updates","text":"<ul> <li>Updated docs indicated VERSION_PART is optional. 22edeac</li> </ul> <ul> <li>Updated tests for bad version parts. 23be62d</li> </ul> <ul> <li> <p>Changed exception type raised when bad version part is detected. 1e3ebc5</p> <ul> <li>ValueError -&gt; click.BadArgumentUsage</li> <li>Updated readme. 7780265</li> </ul> <p>Fixes #7</p> </li> </ul>"},{"location":"CHANGELOG/#041-2023-06-09","title":"0.4.1 (2023-06-09)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_43","title":"Fixes","text":"<ul> <li> <p>Fixes release.yaml. 01870d5</p> <p>Outputs the notes to a file instead of an environment variable.</p> </li> </ul>"},{"location":"CHANGELOG/#other_29","title":"Other","text":"<ul> <li> <p>[pre-commit.ci] auto fixes from pre-commit.com hooks. 266002f</p> <p>for more information, see https://pre-commit.ci - [pre-commit.ci] pre-commit autoupdate. edc444f</p> <p>updates: - github.com/charliermarsh/ruff-pre-commit: v0.0.261 \u2192 v0.0.270</p> </li> </ul>"},{"location":"CHANGELOG/#040-2023-04-20","title":"0.4.0 (2023-04-20)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_44","title":"Fixes","text":"<ul> <li>Fixed pre-commit hook for dependency checking. 3d5c253</li> </ul> <ul> <li>Fixed installing test dependencies. c1034eb</li> </ul> <ul> <li>Fixed dependency spec. 4782745</li> </ul> <ul> <li>Fixed missing python in pypi test. e5ed27d</li> </ul> <ul> <li>Fixed some CI issues. d4b03d7</li> </ul> <ul> <li> <p>Fixed vague commit and tagging info. 4fb5158</p> <ul> <li>If commit is configured false, it will report that it will not commit</li> </ul> <ul> <li>If commit is configured false, tagging is disabled and it reports that</li> </ul> <ul> <li>If tagging is configured false, it will report it is not tagging</li> <li>Fixes test package. 7c12072</li> </ul> <ul> <li>The build-and-inspect action didn\u2019t save the dist packages</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new_22","title":"New","text":"<ul> <li>Added tests for logging branches. f8f0278</li> </ul> <ul> <li>Added path restrictions on release-hints. e1af658</li> </ul> <ul> <li>Added test build to CI. 8738f3f</li> </ul> <ul> <li>Added doc files to table of contents. 49858c0</li> </ul>"},{"location":"CHANGELOG/#other_30","title":"Other","text":"<ul> <li>Completely migrated setuptools to use pyproject.toml. f10f8b2</li> </ul> <ul> <li> <p>[pre-commit.ci] pre-commit autoupdate. d626f7d</p> <p>updates: - https://github.com/python/black \u2192 https://github.com/psf/black</p> </li> </ul>"},{"location":"CHANGELOG/#updates_21","title":"Updates","text":"<ul> <li>Removed pre-commit dependency hook. ac6cdd0</li> </ul> <ul> <li> <p>Changed the version serialization. c529452</p> <ul> <li>can bump \u201cdev\u201d to get a development release</li> <li>Updated formatting documentation. 8006f3e</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#030-2023-04-17","title":"0.3.0 (2023-04-17)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_45","title":"Fixes","text":"<ul> <li>Fixed bug in SCMInfo setup. e8fddc9</li> </ul> <ul> <li>Fixed missing xml coverage report. 696503f</li> </ul> <ul> <li>Fixed assertion in failing test. 7afe58c</li> </ul> <ul> <li> <p>Fixes issue when new version equals current version. 64b0de3</p> <ul> <li>Now it reports they are the same and exits.</li> <li>Fixes issue of duplicate tags. c025650</li> </ul> <ul> <li>Now it checks if the tag exists and reports a warning</li> <li>Fixed automation tooling. 19f13b7</li> </ul> <ul> <li>changed name to bump-my-version in setup.cfg</li> <li>added PAT in release pipeline to (hopefully) allow committing and tagging to master without issue.</li> </ul> </li> </ul>"},{"location":"CHANGELOG/#new_23","title":"New","text":"<ul> <li>Added codecov to workflow. a5009e0</li> </ul>"},{"location":"CHANGELOG/#other_31","title":"Other","text":"<ul> <li>Migrated setuptools metadata to pyproject.toml. 0bd54dc</li> </ul>"},{"location":"CHANGELOG/#updates_22","title":"Updates","text":"<ul> <li>Updated the readme. 1b1d910</li> </ul> <ul> <li>Updated documentation. 6c3b4fe</li> </ul>"},{"location":"CHANGELOG/#020-2023-04-14","title":"0.2.0 (2023-04-14)","text":"<p>Compare the full difference.</p>"},{"location":"CHANGELOG/#fixes_46","title":"Fixes","text":"<ul> <li>Fixed configuration to allow_dirty in bumpversion. b042e31</li> </ul> <ul> <li>Fixes issue with generate-changelog and git. 2a977af</li> </ul> <ul> <li>Fixes the quoting in the bumpversion expressions. 9a55d6d</li> </ul> <ul> <li> <p>Fixed issue with windows testing. b8abc44</p> <ul> <li>different methods for reporting paths was resolved by casting them the pathlib.Paths</li> <li>Fixes windows testing error. 556853b</li> </ul> <ul> <li>the differences in path specifications seems to be causing problems.</li> <li>Fixed type issue in Python 3.7, 3.8. ddfd3bf</li> </ul> </li> </ul> <ul> <li> <p>Fixed configuration file detection. fbf85c2</p> <p>Doesn\u2019t just stop when it finds one, it checks for the existence of the header. - Fixed logging output and output in general. 0aea9dc</p> </li> </ul>"},{"location":"CHANGELOG/#new_24","title":"New","text":"<ul> <li>Added additional option to manual runs: verbose. 81eb097</li> </ul> <ul> <li> <p>Added new workflows. a9cac5b</p> <ul> <li>Added bumpversion.yaml to increase the version when a PR is closed</li> </ul> <ul> <li>Added release.yaml to create a github release and upload things to PyPI</li> </ul> </li> </ul> <ul> <li> <p>Added PYTHONUTF8 mode. 91a73e2</p> <ul> <li>see https://docs.python.org/3/using/windows.html#utf-8-mode</li> </ul> </li> </ul> <ul> <li>Added explicit environment variable declarations. 80fe7ef</li> </ul> <ul> <li>Added a github CI workflow. 2b3b358</li> </ul> <ul> <li> <p>Added files for coverage to ignore. cfbba08</p> <ul> <li>main.py</li> <li>aliases.py</li> </ul> </li> </ul> <ul> <li>Added LICENSE. 34a9be5</li> </ul> <ul> <li>Added tests for version parsing errors. 71a204b</li> </ul> <ul> <li>Added utf8 test in files. 9cb8f60</li> </ul> <ul> <li>Added more tests for scm. fe794dd</li> </ul> <ul> <li>Added \u2013list function. 88709fd</li> </ul>"},{"location":"CHANGELOG/#other_32","title":"Other","text":"<ul> <li>Removing testing for Python 3.7. 19eaeef</li> </ul> <ul> <li>Moved configuration to pyproject.toml. d339007</li> </ul> <ul> <li>Initial conversion. f5d1cab</li> </ul> <ul> <li>Initial commit. d7dec79</li> </ul>"},{"location":"CHANGELOG/#updates_23","title":"Updates","text":"<ul> <li> <p>Updated workflows. 857835d</p> <ul> <li>Added better changelog parsing</li> <li>Added workflow dispatch inputs for manual runs</li> <li>Improved documentation. f3b7a0f</li> </ul> </li> </ul> <ul> <li>Renamed tox job to test. a9b6db3</li> </ul> <ul> <li>Updated README and other documentation. e0cebb3</li> </ul> <ul> <li>Improved Mercurial support. 560999d</li> </ul> <ul> <li>Improved logging output. 6ccfa7d</li> </ul> <ul> <li>Changed errors to subclass UsageError. a447651</li> </ul> <ul> <li> <p>Changed BaseVCS to SourceCodeManager. 11c5609</p> <p>Just for consistency. - Modified the group command back to a single command. 6d4179b</p> <p>Will eventually change to a group command, but later.</p> </li> </ul>"},{"location":"CHANGELOG/#010-2023-03-24","title":"0.1.0 (2023-03-24)","text":"<ul> <li>Initial creation</li> </ul>"},{"location":"CONTRIBUTING/","title":"Contributing","text":""},{"location":"CONTRIBUTING/#contributing-to-bump-my-version","title":"Contributing to Bump My Version","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it much easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>If you like the project but don\u2019t have time to contribute, that\u2019s fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about: - Star the project - Tweet about it - Refer to this project in your project\u2019s readme - Mention the project at local meetups and tell your friends/colleagues</p>"},{"location":"CONTRIBUTING/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>I Have a Question</li> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Your First Code Contribution</li> <li>Improving The Documentation</li> <li>Styleguides</li> <li>Join The Project Team</li> </ul>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it are governed by the Bump My Version Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to coreyoordt@gmail.com.</p>"},{"location":"CONTRIBUTING/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you\u2019re running into.</li> <li>Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"CONTRIBUTING/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"CONTRIBUTING/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn\u2019t leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information, and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li>Also, make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</li> <li>Collect information about the bug:<ul> <li>Stack trace (Traceback)</li> <li>OS, Platform, and Version (Windows, Linux, macOS, x86, ARM)</li> <li>The version of Python</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul> </li> </ul>"},{"location":"CONTRIBUTING/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security-related issues, vulnerabilities, or bugs that include sensitive information to the issue tracker or elsewhere in public. Instead, sensitive bugs must be sent by email to coreyoordt@gmail.com.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can\u2019t be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports, you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it\u2019s filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and will not address them until they are included.</li> <li>If the team is able to reproduce the issue, the issue will be left to be implemented by someone.</li> </ul>"},{"location":"CONTRIBUTING/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for Bump My Version, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"CONTRIBUTING/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It\u2019s up to you to make a strong case to convince the project\u2019s developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you\u2019re just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"CONTRIBUTING/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Describe the problem or use case this enhancement solves or the new benefit it provides.</li> <li>Explain why this enhancement would be useful to most Bump My Version users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>You may also tell how current alternatives do not work for you, if appropriate</li> </ul>"},{"location":"CONTRIBUTING/#your-first-code-contribution","title":"Your First Code Contribution","text":""},{"location":"CONTRIBUTING/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"CONTRIBUTING/#setup","title":"Setup","text":"<p>There are several ways to create an isolated Python development environment. This is the default method.</p> <p>Run the following in a terminal:</p> <pre><code># Clone the repository\ngit clone https://github.com/callowayproject/bump-my-version.git\n\n# Enter the repository\ncd bump-my-version\n\n# Create, then activate a virtual environment\npython -m venv env\nsource env/bin/activate\n\n# Install the development requirements\npython -m pip install -r requirements/dev.txt\n</code></pre>"},{"location":"CONTRIBUTING/#run-tests","title":"Run tests","text":"<p>Once setup, you should be able to run tests:</p> <pre><code>pytest\n</code></pre>"},{"location":"CONTRIBUTING/#install-pre-commit-hooks","title":"Install Pre-commit Hooks","text":"<p>Pre-commit hooks are scripts that run every time you make a commit. If any of the scripts fail, it stops the commit. You can see a listing of the checks in the <code>.pre-commit-config.yaml</code> file.</p> <pre><code>pre-commit install\n</code></pre>"},{"location":"CONTRIBUTING/#improving-the-documentation","title":"Improving The Documentation","text":"<p>Please, please help us here.</p>"},{"location":"CONTRIBUTING/#styleguides","title":"Styleguides","text":""},{"location":"CONTRIBUTING/#coding-style","title":"Coding Style","text":"<p>All of the basic coding styles are configured into tools for fixing and checking them. Pre-commit is used to automate the process.</p>"},{"location":"CONTRIBUTING/#commit-messages","title":"Commit Messages","text":"<p>Commit messages are used to generate the change log.</p> <p>New changes</p> <p>Commit messages are categorized as \u201cnew\u201d if the commit message starts with:</p> <ul> <li>new</li> <li>add</li> </ul> <p>For example: <code>Added this cool new feature</code> or <code>New document type added</code>.</p> <p>Updates</p> <p>Commit messages are categorized as \u201cupdates\u201d if the commit message starts with:</p> <ul> <li>update</li> <li>change</li> <li>rename</li> <li>remove</li> <li>delete</li> <li>improve</li> <li>refacto</li> <li>chg</li> <li>modif</li> </ul> <p>For example: <code>Modified the taxonomy schema</code> or <code>Improves performance by 419%</code></p> <p>Fixes</p> <p>Commit messages are categorizes as \u201cfixes\u201d if the commit message starts with:</p> <ul> <li>fix</li> </ul> <p>For example: <code>Fixes bug #123</code></p> <p>Other</p> <p>All other commit messages are categorized as \u201cother.\u201d</p> <p>Ignoring commit messages</p> <p>To have the change log generator ignore this commit, add to the summary line:</p> <ul> <li><code>@minor</code></li> <li><code>!minor</code></li> <li><code>@cosmetic</code></li> <li><code>!cosmetic</code></li> <li><code>@refactor</code></li> <li><code>!refactor</code></li> <li><code>@wip</code></li> <li><code>!wip</code></li> </ul>"},{"location":"CONTRIBUTING/#join-the-project-team","title":"Join The Project Team","text":"<p>If you would like to be a maintainer, reach out to coreyoordt@gmail.com.</p>"},{"location":"CONTRIBUTING/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"explanation/","title":"Index","text":"<ul> <li>*.md</li> </ul>"},{"location":"explanation/mental-model/","title":"The mental model used by Bump My Version","text":""},{"location":"explanation/mental-model/#overview","title":"Overview","text":"<p>There are four main concepts in Bump My Version:</p> <ol> <li>Configuration</li> <li>Version handling</li> <li>File changing</li> <li>Source control management interface</li> </ol>"},{"location":"explanation/mental-model/#configuration","title":"Configuration","text":"<p>The predecessor to Bump My Version, bumpversion, was designed to have the configuration file optional. All configuration values could be specified on the command line. This only worked in the simplest of version schemes.</p> <p>While Bump My Version can do many things without a configuration file, it is designed to have a configuration file. The configuration file is required to specify the version scheme. The configuration file also specifies the files to change and how to change them.</p>"},{"location":"explanation/mental-model/#version-handling","title":"Version handling","text":"<p>Bump My Version abstracts the version handling into a few concepts:</p> <p>A version spec defines the rules for incrementing a version.</p> <p>A version component spec defines how a single part of a version spec, such as <code>major</code>, <code>minor</code>, or <code>patch</code>, works. It defines the types of values, how to increment the component, and how to reset it.</p> <p>A version parser is a regular expression used in several ways. Its named capture groups define the possible components in a version spec and the order in which they appear. It also parses a version string into version component names and their values.</p> <p>A version is the concrete representation of a version spec. It is a mapping of version component names to version components. </p> <p>A version component is the concrete representation of a version component spec. It is a version component spec with a specific value.</p> <p>A version serialization format is a list of format strings used to serialize a version into a string.</p>"},{"location":"explanation/mental-model/#how-a-version-spec-is-generated","title":"How a version spec is generated","text":"How a configuration file is used to generate a version spec. <p>The most important part of the configuration file is the version parser. It defines the structure of the version spec. </p> <p>If the configuration file contains a version component spec that matches a named capture group in the version parser, then that version component spec is used in the version spec. The yellow and green named capture groups in the diagram demonstrate this.</p> <p>If the configuration file does not contain a version component spec that matches a named capture group in the version parser, then a default version component spec is used. The blue named capture group in the diagram demonstrates this.</p> <p>The component dependency graph determines the order in which the version components are incremented and reset. For example, in the diagram, the patch component depends on the minor component, which depends on the <code>major</code> component. Therefore, when the <code>major</code> component is incremented, the <code>minor</code> component is reset, which cascades to the <code>patch</code> component. </p>"},{"location":"explanation/mental-model/#how-a-version-is-generated","title":"How a version is generated","text":"How a version spec is used to generate a version. <p>The version spec has a <code>create_version</code> method that takes a mapping of version component names to values. </p> <p>Each version component spec has a <code>create_component</code> method that takes a value. The <code>create_version</code> method calls the <code>create_component</code> method for each version component spec in the version spec with the value from the mapping.</p> <p>The <code>create_component</code> assembles its version spec_ with the version components to create a version.</p>"},{"location":"explanation/mental-model/#how-a-version-is-serialized","title":"How a version is serialized","text":"<p>Optional value rule. Version component specs can define an optional value. For example, numeric components have <code>0</code> as an optional value. Optional values may be omitted from the serialization as long as all dependent components also have optional values.</p> <p>Required value rule. Version component specs is required if its value or the value of any of its dependent components is not optional.</p> <p>A valid serialization contains all the required components in the version spec based on the required value rule.</p> <p>An invalid serialization does not contain all the required components in the version spec based on the required value rule.</p> <p>The optimal serialization is the valid serialization that uses the fewest components.</p> <p>The <code>serialize</code> method of the version spec returns either the optimal serialization or the first invalid serialization.</p>"},{"location":"explanation/mental-model/#version-serialization-examples","title":"Version serialization examples","text":"<p>No optional values</p> <p>In this example, the <code>major</code> component is <code>1</code>,  the <code>minor</code> component is <code>2</code>, and <code>patch</code> component is <code>3</code>. Since none of the values are optional (<code>0</code>), only one serialization format is valid. This one valid format is the optimal format.</p> <p></p> <p>One optional value</p> <p>A version with values major=1, minor=2, and patch=0 has two valid serializations. The optimal serialization is the one that uses the fewest components. <code>1.2</code> in this example.</p> <p></p> <p>Two optional values</p> <p>A version with values major=1, minor=0, and patch=0 has three valid serializations. The optimal serialization is the one that uses the fewest components. <code>1</code> in this example.</p> <p></p> <p>No valid serialization options</p> <p>A version with values major=1, minor=2, and patch=3 has no valid serializations in this example. The <code>serialize</code> method returns the first invalid serialization.</p>"},{"location":"explanation/show-subcommand/","title":"The show subcommand","text":"<p>The main purpose of the <code>show</code> subcommand is to provide access to configuration data via scripts.</p>"},{"location":"explanation/show-subcommand/#basic-use","title":"Basic use","text":"<p>The configuration object is a <code>dict</code> containing nested data structures. The arguments and options of this command relate to extracting data from the configuration object and presenting the extracted data. </p>"},{"location":"explanation/show-subcommand/#specifying-the-output-data","title":"Specifying the output data","text":"<p>The positional arguments determine the data shown. If nothing or <code>all</code> is passed, the entire configuration is shown.</p> <p>Positional arguments are specified using a format like Django variable resolution.</p> <p>Examples:</p> <ul> <li><code>a.b</code> specifies the \u201cb\u201d key in the nested dictionaries: <code>{\"a\": {\"b\": \"value\"}}</code></li> <li><code>a.3</code> specifies the 4th item (the first is 0) of the list at key \u201ca\u201d: <code>{\"a\": [\"no\", \"nay\", \"nyet\", \"value\"]}</code></li> </ul>"},{"location":"explanation/show-subcommand/#specifying-the-output-format","title":"Specifying the output format","text":"<p>If only one positional argument is passed, the default format only shows its value. If no positional arguments, several positional arguments, or <code>all</code> is passed, the output from <code>pprint.pprint</code> is shown.</p> <p>This makes getting the current version easy:</p> <pre><code>$ bump-my-version show current_version\n1.0.1\n</code></pre> <p>You can request the output be formatted as YAML or JSON:</p> <pre><code>$ bump-my-version show --format yaml current_version\ncurrent_version: \"1.0.1\"\n$ bump-my-version show --format json current_version\n{\n  \"current_version\": \"1.0.1\"\n}\n</code></pre>"},{"location":"explanation/show-subcommand/#including-the-incremented-version-before-bumping","title":"Including the incremented version before bumping","text":"<p>Your workflow might want to know the new version before you actually do the bumping. The <code>--increment</code> or <code>-i</code> option accepts a version part to bump and adds a <code>new_version</code> key into the configuration.</p> <pre><code>$ bump-my-version --increment patch show\n1.0.2\n$ bump-my-version --increment minor show\n1.1.0\n$ bump-my-version --increment major show\n2.0.0\n</code></pre>"},{"location":"explanation/version-parts/","title":"Version components","text":"<ul> <li>The version string is the rendering of some or all version parts.</li> <li>While the version string may be rendered differently in various places, the value for all parts is maintained in Bump My Version\u2019s configuration.</li> <li>The version parts are typically dependent on each other. Incrementing one part might change other elements.</li> <li>You can compare two version strings (of the same project) and know which is more recent.</li> </ul>"},{"location":"explanation/version-parts/#version-configuration","title":"Version configuration","text":"<p>A version configuration consists of the following:</p> <ul> <li>A regular expression that will parse all the possible parts and name them</li> <li>A list of one or more serialization formats</li> </ul> <p>A version string consists of one or more parts; e.g., version <code>1.0.2</code> has three parts, separated by a dot (<code>.</code>) character.</p> <p>The names of these parts are defined in the named groups within the <code>parse</code> regular expression. The default configuration calls them major, minor, and patch.</p> <p>The <code>serialize</code> configuration value is a list of default formats. You have the option for multiple serialization formats to omit optional values. For example, the following configuration:</p> <pre><code>serialize = [\n    \"{major}.{minor}.{patch}\",\n    \"{major}.{minor}\",\n]\n</code></pre> <p>Bump-my-version will serialize using the first format if the <code>patch</code> value is not <code>0</code>. If the <code>patch</code> value is <code>0</code>, Bump My Version will use the second format.</p>"},{"location":"explanation/version-parts/#version-part-configuration","title":"Version part configuration","text":"<p>A version part configuration consists of the following:</p> <ul> <li>An incrementing function</li> <li>An optional value</li> <li>A first value</li> <li>A flag indicating its dependence or independence of changes to other version parts</li> </ul>"},{"location":"explanation/version-parts/#incrementing-functions","title":"Incrementing functions","text":"<p>There are two incrementing functions: numeric and value. The numeric function uses integer values and returns the next integer value. The values function uses a sequence of values and returns the next value until finished.</p> <p>By default, parts use the numeric function starting at 0.</p> <p>You can configure a part using the values function by providing a list of values in the version part\u2019s configuration. For example, for the <code>release_name</code> part:</p> <pre><code>[tool.bumpversion.parts.release_name]\nvalues = [\n    \"witty-warthog\", \n    \"ridiculous-rat\", \n    \"marvelous-mantis\",\n]\n</code></pre>"},{"location":"explanation/version-parts/#optional-values","title":"Optional values","text":"<p>By default, the first value of a version part is considered optional. An optional value may be omitted from the version serialization. Using the example from above:</p> <pre><code>serialize = [\n    \"{major}.{minor}.{patch}\",\n    \"{major}.{minor}\",\n]\n</code></pre> <p>Version <code>1.4.0</code> is rendered as <code>1.4</code> since the <code>patch</code> is <code>0</code>; as the first value, it is optional.</p> <p>Optional values are helpful for non-numeric version parts that indicate development stages, such as alpha or beta.</p> <p>Example:</p> <pre><code>[tool.bumpversion]\ncurrent_version = \"1.0.0\"\nparse = \"\"\"(?x)\n    (?P&lt;major&gt;[0-9]+)\n    \\\\.(?P&lt;minor&gt;[0-9]+)\n    \\\\.(?P&lt;patch&gt;[0-9]+)\n    (?:\n        -(?P&lt;pre_label&gt;alpha|beta|stable)\n        (?:-(?P&lt;pre_n&gt;[0-9]+))?\n    )?\n\"\"\"\nserialize = [\n    \"{major}.{minor}.{patch}-{pre_label}-{pre_n}\",\n    \"{major}.{minor}.{patch}\",\n]\n\n[tool.bumpversion.parts.pre_label]\noptional_value = \"stable\"\nvalues =[\n    \"alpha\",\n    \"beta\",\n    \"stable\",\n]\n</code></pre> <p>Bumping the <code>patch</code> part of version <code>1.0.0</code> would change the version to <code>1.0.1-alpha-0</code>. Bumping the <code>pre_label</code> part would change the version to <code>1.0.1-beta-0</code>. Bumping the <code>pre_label</code> part again would change the version to <code>1.0.1</code>. The <code>stable-0</code> is not serialized because both <code>stable</code> and <code>0</code> are optional.</p>"},{"location":"explanation/version-parts/#first-values","title":"First Values","text":"<p>You can specify the starting number with the first_value configuration for numeric version parts.</p> <p>For example, if we added the following to the above configuration:</p> <pre><code>[tool.bumpversion.parts.pre_n]\nfirst_value = \"1\"\n</code></pre> <p>Bumping the <code>patch</code> value of version <code>1.0.0</code> would change the version to <code>1.0.1-alpha-1</code> instead of <code>1.0.1-alpha-0</code>.</p>"},{"location":"explanation/version-parts/#independent-values","title":"Independent Values","text":"<p>In the pattern <code>{major}.{minor}.{patch}-{pre_label}-{pre_n}</code>, each version part resets to its first value when the element preceding it changes. All these version parts are dependent.</p> <p>You can include a value that incremented independently from the other parts, such as a <code>build</code> part: <code>{major}.{minor}.{patch}-{pre_label}-{pre_n}+{build}</code>\u2014in the configuration for that part, set <code>independent=true</code>.</p> <pre><code>[tool.bumpversion.parts.build]\nindependent = true\n</code></pre>"},{"location":"explanation/version-parts/#reference","title":"Reference","text":"<ul> <li>https://devopedia.org/semantic-versioning</li> <li>https://semver.org</li> <li>https://calver.org</li> </ul>"},{"location":"howtos/avoid-incorrect-replacements/","title":"Avoid incorrect replacements","text":"<p>In files that have multiple version strings, Bump My Version may find the wrong string and replace it. Given this <code>requirements.txt</code> for <code>MyProject</code>:</p> <pre><code>Django&gt;=1.5.6,&lt;1.6\nMyProject==1.5.6\n</code></pre> <p>The default search and replace templates will replace the wrong text. Instead of changing <code>MyProject</code>\u2019s version from <code>1.5.6</code> to <code>1.6.0</code>, it changes <code>Django</code>\u2019s version:</p> <pre><code>Django&gt;=1.6.0,&lt;1.6\nMyProject==1.5.6\n</code></pre> <p>Providing search and replace templates for the <code>requirements.txt</code> file will avoid this.</p> <p>This <code>.bumpversion.toml</code> will ensure only the line containing <code>MyProject</code> will be changed:</p> <pre><code>[tool.bumpversion]\ncurrent_version = \"1.5.6\"\n\n[[tool.bumpversion.files]]\nfilename = \"requirements.txt\"\nsearch = \"MyProject=={current_version}\"\nreplace = \"MyProject=={new_version}\"\n</code></pre> <p>If the string to be replaced includes literal quotes, the search and replace patterns must include them to match. Given the file <code>version.sh</code>:</p> <pre><code>MY_VERSION=\"1.2.3\"\n</code></pre> <p>Then the following search and replace patterns (including quotes) would be required:</p> <pre><code>[[tool.bumpversion.files]]\nfilename = \"version.sh\"\nsearch = \"MY_VERSION=\\\"{current_version}\\\"\"\nreplace = \"MY_VERSION=\\\"{new_version}\\\"\"\n</code></pre>"},{"location":"howtos/calver/","title":"Using Calendar Versioning (CalVer)","text":"<p>Calendar Versioning (CalVer) is a versioning scheme that uses a date-based version number. </p> <p>For this example, we will use the following format: <code>YYYY.MM.DD.patch</code>. It will yield numbers like:</p> <ul> <li><code>2022.2.1</code> for the first patch of February 1, 2022</li> <li><code>2022.2.1.1</code> for the second patch of February 1, 2022</li> </ul>"},{"location":"howtos/calver/#initial-configuration","title":"Initial configuration","text":".bumpversion.toml<pre><code>[tool.bumpversion]\ncurrent_version = \"2024.3.1.4\"\nparse = \"\"\"(?x)                     # Verbose mode\n    (?P&lt;release&gt;                    # The release part\n        (?:[1-9][0-9]{3})\\\\.        # YYYY.\n        (?:1[0-2]|[1-9])\\\\.         # MM.\n        (?:3[0-1]|[1-2][0-9]|[1-9]) # DD\n    )\n    (?:\\\\.(?P&lt;patch&gt;\\\\d+))?         # .patch, optional\n\"\"\"\nserialize = [\"{release}.{patch}\", \"{release}\"]\n\n[tool.bumpversion.parts.release]\ncalver_format = \"{YYYY}.{MM}.{DD}\"\n</code></pre> <p>You can look up the regular expressions for the CalVer format in the CalVer reference.</p>"},{"location":"howtos/calver/#expected-behavior","title":"Expected behavior","text":"<ul> <li>CalVer version components are marked as <code>always_increment</code> by default.</li> <li>When bumping a version, you specify which component to increment. It is called the target component.</li> <li>When bumping a version, the components marked as <code>always_increment</code> are incremented first.</li> <li>If an <code>always_increment</code> component\u2019s value changed, its dependent components are marked for reset to their default values.</li> <li>If the target component is in the set of components marked for reset, the target component is reset to its default value.</li> <li>If the target component is not in the set of components marked for reset, the target component is incremented and its dependent components are reset to their default values.</li> </ul>"},{"location":"howtos/calver/#bumping-the-release-resets-the-patch-part","title":"Bumping the release resets the patch part","text":"<p>When you bump the calendar version, the patch is reset to 0 even if the release did not change.</p> Bumping the release resets patch<pre><code>$ date -I      \n2024-03-1\n$ bump-my-version show-bump\n2024.3.1.4 \u2500\u2500 bump \u2500\u252c\u2500 release \u2500 2024.3.1\n                    \u2570\u2500 patch \u2500\u2500\u2500 2024.3.1.5\n</code></pre> <p>The next day:</p> Bumping the release resets patch, the next day<pre><code>$ date -I      \n2024-03-2\n$ bump-my-version show-bump\n2024.3.1.4 \u2500\u2500 bump \u2500\u252c\u2500 release \u2500 2024.3.2\n                    \u2570\u2500 patch \u2500\u2500\u2500 2024.3.2\n</code></pre>"},{"location":"howtos/calver/#the-result-of-a-bump-to-patch-depends-on-the-date","title":"The result of a bump to patch depends on the date","text":"<p>Calendar Versioned parts are updated with every bump, regardless of the part being bumped. If you are bumping the version within the same time period (in this example, the same day), the <code>release</code> part will not change. So bumping the <code>patch</code> part will increment the <code>patch</code> part only.</p> Bumping patch on the same day<pre><code>$ date -I      \n2024-03-1\n$ bump-my-version show-bump\n2024.3.1.4 \u2500\u2500 bump \u2500\u252c\u2500 release \u2500 2024.3.1\n                    \u2570\u2500 patch \u2500\u2500\u2500 2024.3.1.5\n</code></pre> <p>However, if you bump the version on the next day, the <code>release</code> part will also be updated.</p> Bumping patch on the next day<pre><code>$ date -I      \n2024-03-2\n$ bump-my-version show-bump\n2024.3.1.4 \u2500\u2500 bump \u2500\u252c\u2500 release \u2500 2024.3.2\n                    \u2570\u2500 patch \u2500\u2500\u2500 2024.3.2\n</code></pre>"},{"location":"howtos/custom-version-formats-by-file/","title":"Custom version formats in different files","text":"<p>You can use file configurations to replace the version in multiple files, even if each file has the version formatted differently.</p> <p>In a module-aware Go project, when you create a major version of your module beyond <code>v1</code>, your module name must include the major version number (e.g., <code>github.com/myorg/myproject/v2</code>). However, you also have the full version in a YAML file named <code>release-channels.yaml</code>.</p> <p><code>go.mod</code> file:</p> <pre><code>module github.com/myorg/myproject/v2\n\ngo 1.12\n\nrequire (\n    ...\n)\n</code></pre> <p><code>release-channels.yaml</code> file:</p> <pre><code>stable: \"v2.21.4\"\n</code></pre> <p>You can use Bump My Version to maintain the major version number within the <code>go.mod</code> file by using the <code>parse</code> and <code>serialize</code> options, as in this example:</p> <p><code>.bumpversion.toml</code> file:</p> <pre><code>[tool.bumpversion]\ncurrent_version = \"2.21.4\"\n\n[[tool.bumpversion.files]]\nfilename = \"go.mod\"\nparse = \"(?P&lt;major&gt;\\\\d+)\"\nserialize = \"{major}\"\nsearch = \"module github.com/myorg/myproject/v{current_version}\"\nreplace = \"module github.com/myorg/myproject/v{new_version}\"\n\n[[tool.bumpversion.files]]\nfilename = \"release-channels.yaml\"\n</code></pre> <p>While all the version bumps are <code>minor</code> or <code>patch</code>, the <code>go.mod</code> file doesn\u2019t change, while the <code>release-channels.yaml</code> file will. As soon as you do a <code>major</code> version bump, the <code>go.mod</code> file now contains this module directive:</p> <pre><code>module github.com/myorg/myproject/v3\n</code></pre>"},{"location":"howtos/multiple-replacements/","title":"Multiple replacements within the same file","text":"<p>To make several replacements in the same file, you must configure multiple <code>[[tool.bumpversion.files]]</code> sections for the same file with different configuration options.</p> <p>In this example, the changelog is generated before the version bump. It uses <code>Unreleased</code> as the heading and includes a link to GitHub to compare this version (<code>HEAD</code>) with the previous version.</p> <p>To change <code>Unreleased</code> to the current version, we have an entry with <code>search</code> set to <code>Unreleased</code>.  The default <code>replace</code> value is <code>{new_version}</code>, so changing it is unnecessary.</p> <p>To change the link, another entry has its <code>search</code> set to <code>{current_version}...HEAD</code> and the <code>replace</code> set to <code>{current_version}...{new_version}</code>.</p> <pre><code>[[tool.bumpversion.files]]\nfilename = \"CHANGELOG.md\"\nsearch = \"Unreleased\"\n\n[[tool.bumpversion.files]]\nfilename = \"CHANGELOG.md\"\nsearch = \"{current_version}...HEAD\"\nreplace = \"{current_version}...{new_version}\"\n</code></pre>"},{"location":"howtos/nav/","title":"Nav","text":"<ul> <li>*.md</li> </ul>"},{"location":"howtos/update-a-date/","title":"How to update a date in a file","text":"<p>Many times when bumping a version, you will also want to update a date in a file. This is a common use case for changelogs, but it could be any file that contains a date. In this example, we have an <code>__init__.py</code> that looks like this:</p> my_package/__init__.py<pre><code>__date__ = '2022-12-19'\n__version__ = '0.4.0'\n</code></pre> <p>The desired outcome is to update the date to the current date. For example, if today is February 23, 2024, the init.py file should look like this after a <code>minor</code> bump:</p> my_package/__init__.py<pre><code>__date__ = '2024-02-23'\n__version__ = '0.5.0'\n</code></pre>"},{"location":"howtos/update-a-date/#setting-up-the-file-configurations","title":"Setting up the file configurations","text":"<p>We need Bump My Version to update the <code>__init__.py</code> file twice: once for the version and once for the date. Here is the necessary configuration:</p> .bumpversion.toml or other config file<pre><code>[[tool.bumpversion.files]]\nfilename = '__init__.py'\nsearch = \"__date__ = '\\\\d{{4}}-\\\\d{{2}}-\\\\d{{2}}'\"\nreplace = \"__date__ = '{now:%Y-%m-%d}'\"\nregex = true\n\n[[tool.bumpversion.files]]\nfilename = '__init__.py'\n</code></pre>"},{"location":"reference/","title":"Index","text":"<ul> <li>Command-line interface</li> <li>Configuration</li> <li>Calendar versioning reference</li> <li>Formatting context</li> <li>Search and replace configuration</li> <li>API</li> </ul>"},{"location":"reference/calver_reference/","title":"Calendar versioning reference","text":""},{"location":"reference/calver_reference/#calendar-versioning-codes","title":"Calendar versioning codes","text":"<p>The following table lists the available format codes for calendar versioning (CalVer) schemes. The codes can be used to define the version format in the <code>calver_format</code> configuration options. Formatting codes, surrounded by <code>{ }</code> can be combined to create a custom version format. For example, the format <code>YYYY.MM.DD</code> can be defined as <code>\"{YYYY}.{MM}.{DD}\"</code>.</p> Code Example(s) Comment <code>YYYY</code> 2000, 2001, \u2026, 2099 Full year <code>YY</code> 0, 1, 2, \u2026, 99 Short year as integer <code>0Y</code> 00, 01, 02, \u2026, 99 Short Year, zero-padded <code>MMM</code> Jan, Feb, jan, f\u00e9v Month abbreviation, locale-based <code>MM</code> 1, 2, \u2026, 12 Month as integer <code>0M</code> 01, 02, \u2026, 12 Month, zero-padded <code>DD</code> 1, 2, \u2026, 31 Day of month as integer <code>0D</code> 01, 02, \u2026, 31 Day of month, zero-padded <code>JJJ</code> 1, 2, 3, \u2026, 366 Day of year as integer <code>00J</code> 001, 002, \u2026, 366 Day of year, zero-padded <code>Q</code> 1, 2, 3, 4 Quarter <code>WW</code> 0, 1, 2, \u2026, 53 Week number, Monday is first day <code>0W</code> 00, 01, 02, \u2026, 53 Week number, Monday is first day, zero-padded <code>UU</code> 0, 1, 2, \u2026, 53 Week number, Sunday is first day <code>0U</code> 00, 01, 02, \u2026, 53 Week number, Sunday is first day, zero-padded <code>VV</code> 1, 2, \u2026, 53 ISO 8601 week number as integer <code>0V</code> 01, 02, \u2026, 53 ISO 8601 week number, zero-padded <code>GGGG</code> 2000, 2001, \u2026, 2099 ISO 8601 week-based year <code>GG</code> 0, 1, 2, \u2026, 99 ISO 8601 short week-based year as integer <code>0G</code> 01, 02, \u2026, 99 ISO 8601 short week-based year, zero-padded Example configuration<pre><code>[tool.bumpversion.parts.release]\ncalver_format = \"{YYYY}.{MM}.{DD}\"\n</code></pre>"},{"location":"reference/calver_reference/#parsing-calver-versions","title":"Parsing CalVer versions","text":"<p>Using the following chart, we can set up the version parsing:</p> Code Regex <code>YYYY</code> <code>(?:[1-9][0-9]{3})</code> <code>YY</code> <code>(?:[1-9][0-9]?)</code> <code>0Y</code> <code>(?:[0-9]{2})</code> <code>MMM</code> See below <code>MM</code> <code>(?:1[0-2]\\|[1-9])</code> <code>0M</code> <code>(?:1[0-2]\\|0[1-9])</code> <code>DD</code> <code>(?:3[0-1]\\|[1-2][0-9]\\|[1-9])</code> <code>0D</code> <code>(?:3[0-1]\\|[1-2][0-9]\\|0[1-9])</code> <code>JJJ</code> <code>(?:36[0-6]\\|3[0-5][0-9]\\|[1-2][0-9][0-9]\\|[1-9][0-9]\\|[1-9])</code> <code>00J</code> <code>(?:36[0-6]\\|3[0-5][0-9]\\|[1-2][0-9][0-9]\\|0[1-9][0-9]\\|00[1-9])</code> <code>Q</code> <code>(?:[1-4])</code> <code>WW</code> <code>(?:5[0-3]\\|[1-4][0-9]\\|[0-9])</code> <code>0W</code> <code>(?:5[0-3]\\|[0-4][0-9])</code> <code>UU</code> <code>(?:5[0-3]\\|[1-4][0-9]\\|[0-9])</code> <code>0U</code> <code>(?:5[0-3]\\|[0-4][0-9])</code> <code>VV</code> <code>(?:5[0-3]\\|[1-4][0-9]\\|[1-9])</code> <code>0V</code> <code>(?:5[0-3]\\|[1-4][0-9]\\|0[1-9])</code> <code>GGGG</code> <code>(?:[1-9][0-9]{3})</code> <code>GG</code> <code>(?:[0-9][0-9]?)</code> <code>0G</code> <code>(?:[0-9]{2})</code> <p>Month abbreviations</p> <p>The month abbreviation is locale-based. Here are some examples:</p> <p><code>(?:Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)</code> for English</p> <p><code>(?:jan|f\u00e9v|mar|avr|mai|jui|jui|ao\u00fb|sep|oct|nov|d\u00e9c)</code> for French</p> <p>You can use these regular expressions to parse CalVer versions in your project. For example, the following <code>parse</code> configuration can be used to parse a version string in the format <code>YYYY.MM.DD</code> as the <code>release</code> part of the version string:</p> <pre><code>[tool.bumpversion]\nparse = \"\"\"(?x)                      # Verbose mode\n    (?P&lt;release&gt;\n        (?:[1-9][0-9]{3})\\\\.         # YYYY.\n        (?:1[0-2]|[1-9])\\\\.          # MM.\n        (?:3[0-1]|[1-2][0-9]|[1-9])  # DD\n    )\n\"\"\"\n</code></pre>"},{"location":"reference/cli/","title":"CLI Reference","text":""},{"location":"reference/cli/#bump-my-version","title":"bump-my-version","text":"<p>Version bump your Python project.</p> <p>Usage:</p> <pre><code>bump-my-version [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--version</code> boolean Show the version and exit. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code> <p>Subcommands</p> <ul> <li>bump: </li> <li>replace: </li> <li>sample-config: Print a sample configuration file.</li> <li>show: </li> <li>show-bump: Show the possible versions resulting from the bump subcommand.</li> </ul>"},{"location":"reference/cli/#bump-my-version-bump","title":"bump-my-version bump","text":"<p>Change the version.</p> <p>ARGS may contain any of the following:</p> <p>VERSION_PART is the part of the version to increase, e.g. <code>minor</code>. Valid values include those given in the <code>--serialize</code> / <code>--parse</code> option.</p> <p>FILES are additional file(s) to modify. If you want to rewrite only files specified on the command line, use with the <code>--no-configured-files</code> option.</p> <p>Usage:</p> <pre><code>bump-my-version bump [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config-file</code> path Config file to read most of the variables from. None <code>-v</code>, <code>--verbose</code> integer range (<code>0</code> and above) Print verbose logging to stderr. Can specify several times for more verbosity. <code>0</code> <code>--allow-dirty</code> / <code>--no-allow-dirty</code> boolean Don\u2019t abort if working directory is dirty, or explicitly abort if dirty. None <code>--current-version</code> text Version that needs to be updated None <code>--new-version</code> text New version that should be in the files None <code>--parse</code> text Regex parsing the version string None <code>--serialize</code> text How to format what is parsed back to a version None <code>--search</code> text Template for complete string to search None <code>--replace</code> text Template for complete string to replace None <code>--regex</code> / <code>--no-regex</code> boolean Treat the search parameter as a regular expression or explicitly do not treat it as a regular expression. None <code>--no-configured-files</code> boolean Only replace the version in files specified on the command line, ignoring the files from the configuration file. <code>False</code> <code>--ignore-missing-files</code> / <code>--no-ignore-missing-files</code> boolean Ignore any missing files when searching and replacing in files. None <code>--ignore-missing-version</code> / <code>--no-ignore-missing-version</code> boolean Ignore any Version Not Found errors when searching and replacing in files. None <code>--dry-run</code>, <code>-n</code> boolean Don\u2019t write any files, just pretend. <code>False</code> <code>--commit</code> / <code>--no-commit</code> boolean Commit to version control None <code>--tag</code> / <code>--no-tag</code> boolean Create a tag in version control None <code>--sign-tags</code> / <code>--no-sign-tags</code> boolean Sign tags if created None <code>--tag-name</code> text Tag name (only works with \u2013tag) None <code>--tag-message</code> text Tag message None <code>-m</code>, <code>--message</code> text Commit message None <code>--commit-args</code> text Extra arguments to commit command None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#bump-my-version-replace","title":"bump-my-version replace","text":"<p>Replace the version in files.</p> <p>FILES are additional file(s) to modify. If you want to rewrite only files specified on the command line, use with the <code>--no-configured-files</code> option.</p> <p>Usage:</p> <pre><code>bump-my-version replace [OPTIONS] [FILES]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config-file</code> path Config file to read most of the variables from. None <code>-v</code>, <code>--verbose</code> integer range (<code>0</code> and above) Print verbose logging to stderr. Can specify several times for more verbosity. <code>0</code> <code>--allow-dirty</code> / <code>--no-allow-dirty</code> boolean Don\u2019t abort if working directory is dirty, or explicitly abort if dirty. None <code>--current-version</code> text Version that needs to be updated None <code>--new-version</code> text New version that should be in the files. If not specified, it will be None. None <code>--parse</code> text Regex parsing the version string None <code>--serialize</code> text How to format what is parsed back to a version None <code>--search</code> text Template for complete string to search None <code>--replace</code> text Template for complete string to replace None <code>--regex</code> / <code>--no-regex</code> boolean Treat the search parameter as a regular expression or explicitly do not treat it as a regular expression. <code>False</code> <code>--no-configured-files</code> boolean Only replace the version in files specified on the command line, ignoring the files from the configuration file. <code>False</code> <code>--ignore-missing-version</code> boolean Ignore any Version Not Found errors when searching and replacing in files. <code>False</code> <code>--ignore-missing-files</code> boolean Ignore any missing files when searching and replacing in files. <code>False</code> <code>--dry-run</code>, <code>-n</code> boolean Don\u2019t write any files, just pretend. <code>False</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#bump-my-version-sample-config","title":"bump-my-version sample-config","text":"<p>Print a sample configuration file.</p> <p>Usage:</p> <pre><code>bump-my-version sample-config [OPTIONS]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--prompt</code> / <code>--no-prompt</code> boolean Ask the user questions about the configuration. <code>True</code> <code>--destination</code> choice (<code>stdout</code> | <code>.bumpversion.toml</code> | <code>pyproject.toml</code>) Where to write the sample configuration. <code>stdout</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#bump-my-version-show","title":"bump-my-version show","text":"<p>Show current configuration information.</p> <p>ARGS may contain one or more configuration attributes. For example:</p> <ul> <li><code>bump-my-version show current_version</code></li> </ul> <ul> <li><code>bump-my-version show files.0.filename</code></li> </ul> <ul> <li><code>bump-my-version show scm_info.branch_name</code></li> </ul> <ul> <li><code>bump-my-version show current_version scm_info.distance_to_latest_tag</code></li> </ul> <p>Usage:</p> <pre><code>bump-my-version show [OPTIONS] [ARGS]...\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config-file</code> path Config file to read most of the variables from. None <code>-f</code>, <code>--format</code> choice (<code>default</code> | <code>yaml</code> | <code>json</code>) Config file to read most of the variables from. <code>default</code> <code>-i</code>, <code>--increment</code> text Increment the version component and add <code>new_version</code> to the configuration. None <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/cli/#bump-my-version-show-bump","title":"bump-my-version show-bump","text":"<p>Show the possible versions resulting from the bump subcommand.</p> <p>Usage:</p> <pre><code>bump-my-version show-bump [OPTIONS] [VERSION]\n</code></pre> <p>Options:</p> Name Type Description Default <code>--config-file</code> path Config file to read most of the variables from. None <code>--ascii</code> boolean Use ASCII characters only. <code>False</code> <code>-v</code>, <code>--verbose</code> integer range (<code>0</code> and above) Print verbose logging to stderr. Can specify several times for more verbosity. <code>0</code> <code>--help</code> boolean Show this message and exit. <code>False</code>"},{"location":"reference/formatting-context/","title":"Formatting context","text":"<p>These fields are available for</p> <ul> <li>version serializing</li> <li>searching and replacing in files</li> <li>commit messages</li> <li>tag names</li> <li>tag annotations</li> </ul>"},{"location":"reference/formatting-context/#escaped-characters","title":"Escaped characters","text":"<code>#</code> The literal hash or octothorpe character. <code>;</code> The literal semicolon character."},{"location":"reference/formatting-context/#date-and-time-fields","title":"Date and time fields","text":"<code>now</code> A Python datetime object representing the current local time, without a time zone reference. <code>utcnow</code> A Python datetime object representing the current local time in the UTC time zone. <p>You can provide additional formatting guidance for datetime objects using formatting codes. Put the formatting codes after the field and a colon. For example, <code>{now:%Y-%m-%d}</code> would output the current local time as <code>2023-04-20</code>.</p>"},{"location":"reference/formatting-context/#source-code-management-fields","title":"Source code management fields","text":"<p>These fields will only have values if the code is in a Git or Mercurial repository.</p> <code>commit_sha</code> The latest commit reference. <code>distance_to_latest_tag</code> The number of commits since the latest tag. <code>dirty</code> A boolean indicating if the current repository has pending changes. <code>branch_name</code> The current branch name. <code>short_branch_name</code> The current branch name, converted to lowercase, with non-alphanumeric characters removed and truncated to 20 characters. For example, <code>feature/MY-long_branch-name</code> would become <code>featuremylongbranchn</code>."},{"location":"reference/formatting-context/#version-fields","title":"Version fields","text":"<code>current_version</code> The current version serialized as a string <code>current_&lt;version component&gt;</code> Each version component defined by the version configuration parsing regular expression. The default configuration would have <code>current_major</code>, <code>current_minor</code>, and <code>current_patch</code> available. <code>new_version</code> The new version serialized as a string <code>new_&lt;version component&gt;</code> Each version component defined by the version configuration parsing regular expression. The default configuration would have <code>new_major</code>, <code>new_minor</code>, and <code>new_patch</code> available. <p>Note</p> <p>The following fields are only available when serializing a version.</p> <code>&lt;version component&gt;</code> Each version part defined by the version configuration parsing regular expression. The default configuration would have <code>major</code>, <code>minor</code>, and <code>patch</code> available."},{"location":"reference/formatting-context/#environment-variables","title":"Environment variables","text":"<p>Every environment variable available at runtime is included with a <code>$</code> prefix. For example if <code>USER</code> was in the environment, <code>{$USER}</code> would render that value.</p> <p>Tip</p> <p>If you use environment variables in your version serialization, you might want to ensure they are set by executing <code>export VAR=value</code> before running the <code>bump-my-version</code> command.</p>"},{"location":"reference/hooks/","title":"Hooks","text":""},{"location":"reference/hooks/#hook-suites","title":"Hook Suites","text":"<p>A hook suite is a list of hooks to run sequentially. A hook is either an individual shell command or an executable script.</p> <p>There are three hook suites: setup, pre-commit, and post-commit. During the version increment process this is the order of operations:</p> <ol> <li>Run setup hooks</li> <li>Increment version</li> <li>Change files</li> <li>Run pre-commit hooks</li> <li>Commit and tag</li> <li>Run post-commit hooks</li> </ol> <p>Note</p> <p>Don\u2019t confuse the pre-commit and post-commit hook suites with Git pre- and post-commit hooks. Those hook suites are named for their adjacency to the commit and tag operation.</p>"},{"location":"reference/hooks/#configuration","title":"Configuration","text":"<p>Configure each hook suite with the <code>setup_hooks</code>, <code>pre_commit_hooks</code>, or <code>post_commit_hooks</code> keys.</p> <p>Each suite takes a list of strings. The strings may be individual commands:</p> Calling individual commands<pre><code>[tool.bumpversion]\nsetup_hooks = [\n    \"git config --global user.email \\\"bump-my-version@github.actions\\\"\",\n    \"git config --global user.name \\\"Testing Git\\\"\",\n    \"git --version\",\n    \"git config --list\",\n]\npre_commit_hooks = [\"cat CHANGELOG.md\"]\npost_commit_hooks = [\"echo Done\"]\n</code></pre> <p>or the path to an executable script:</p> Calling a shell script<pre><code>[tool.bumpversion]\nsetup_hooks = [\"path/to/setup.sh\"]\npre_commit_hooks = [\"path/to/pre-commit.sh\"]\npost_commit_hooks = [\"path/to/post-commit.sh\"]\n</code></pre> <p>Note</p> <p>You can make a script executable using the following steps:</p> <ol> <li>Add a shebang line to the top like <code>#!/bin/bash</code></li> <li>Run <code>chmod u+x path/to/script.sh</code> to set the executable bit</li> </ol>"},{"location":"reference/hooks/#hook-environments","title":"Hook Environments","text":"<p>Each hook has these environment variables set when executed.</p>"},{"location":"reference/hooks/#inherited-environment","title":"Inherited environment","text":"<p>All environment variables set before bump-my-version was run are available.</p>"},{"location":"reference/hooks/#date-and-time-fields","title":"Date and time fields","text":"<code>BVHOOK_NOW</code> The ISO-8601-formatted current local time without a time zone reference. <code>BVHOOK_UTCNOW</code> The ISO-8601-formatted current local time in the UTC time zone."},{"location":"reference/hooks/#source-code-management-fields","title":"Source code management fields","text":"<p>Note</p> <p>These fields will only have values if the code is in a Git or Mercurial repository.</p> <code>BVHOOK_COMMIT_SHA</code> The latest commit reference. <code>BHOOK_DISTANCE_TO_LATEST_TAG</code> The number of commits since the latest tag. <code>BVHOOK_IS_DIRTY</code> A boolean indicating if the current repository has pending changes. <code>BVHOOK_BRANCH_NAME</code> The current branch name. <code>BVHOOK_SHORT_BRANCH_NAME</code> The current branch name, converted to lowercase, with non-alphanumeric characters removed and truncated to 20 characters. For example, <code>feature/MY-long_branch-name</code> would become <code>featuremylongbranchn</code>."},{"location":"reference/hooks/#current-version-fields","title":"Current version fields","text":"<code>BVHOOK_CURRENT_VERSION</code> The current version serialized as a string <code>BVHOOK_CURRENT_TAG</code> The current tag <code>BVHOOK_CURRENT_&lt;version component&gt;</code> Each version component defined by the version configuration parsing regular expression. The default configuration would have <code>BVHOOK_CURRENT_MAJOR</code>, <code>BVHOOK_CURRENT_MINOR</code>, and <code>BVHOOK_CURRENT_PATCH</code> available."},{"location":"reference/hooks/#new-version-fields","title":"New version fields","text":"<p>Note</p> <p>These are not available in the setup hook suite.</p> <code>BVHOOK_NEW_VERSION</code> The new version serialized as a string <code>BVHOOK_NEW_TAG</code> The new tag <code>BVHOOK_NEW_&lt;version component&gt;</code> Each version component defined by the version configuration parsing regular expression. The default configuration would have <code>BVHOOK_NEW_MAJOR</code>, <code>BVHOOK_NEW_MINOR</code>, and <code>BVHOOK_NEW_PATCH</code> available."},{"location":"reference/hooks/#outputs","title":"Outputs","text":"<p>The <code>stdout</code> and <code>stderr</code> streams are echoed to the console if you pass the <code>-vv</code> option.</p>"},{"location":"reference/hooks/#dry-runs","title":"Dry-runs","text":"<p>Bump my version does not execute any hooks during a dry run. With the verbose output option it will state which hooks it would have run.</p>"},{"location":"reference/search-and-replace-config/","title":"Search and replace configuration","text":"<p>Bump-my-version uses a combination of template strings using a formatting context and regular expressions to search the configured files for the old or current version and replace the text with the new version.</p> <p>Bump My Version defaults to using a simple string search. If the search template is not a valid regular expression or if the <code>no-regex</code> flag is <code>True</code>. The search template is always rendered using the formatting context. The basic logic is:</p> <ol> <li>Escape the formatting context for use in a regular expression.</li> <li>Render the search string using the escaped formatting context.</li> <li>Attempt to compile the rendered search string as a regular expression.</li> <li>If the rendered search string is a valid regular expression, use it.</li> <li>If the rendered search string is not a valid regular expression or the <code>no-regex</code> flag is <code>True</code>, use the search string rendered with the unescaped context.</li> </ol>"},{"location":"reference/search-and-replace-config/#using-template-strings","title":"Using template strings","text":"<p>Both the search and replace templates are rendered using the formatting context. However, only the search template is also treated as a regular expression. The replacement fields available in the formatting context are enclosed in curly braces <code>{}</code>. </p> <p>The search and replace templates can be multiple lines, like so:</p> <pre><code>[tool.bumpversion]\ncurrent_version = \"1.2.3\"\n\n[[tool.bumpversion.files]]\nfilename = \"config.ini\"\nsearch = \"[myproject]\\nversion={current_version}\"\nreplace = \"[myproject]\\nversion={new_version}\"\n</code></pre> <p>Alternatively, using TOML\u2019s multiline strings:</p> <pre><code>[tool.bumpversion]\ncurrent_version = \"1.2.3\"\n\n[[tool.bumpversion.files]]\nfilename = \"config.ini\"\nsearch = \"\"\"\n[myproject]\nversion={current_version}\"\"\"\n\nreplace = \"\"\"\n[myproject]\nversion={new_version}\"\"\"\n</code></pre>"},{"location":"reference/search-and-replace-config/#using-regular-expressions","title":"Using regular expressions","text":"<p>Only the search template will use Python\u2019s regular expression syntax with minor changes. The template string is rendered using the formatting context. The resulting string is treated as a regular expression for searching unless configured otherwise.</p> <p>Curly braces (<code>{}</code>) must be doubled in the regular expression to escape them from the string-formatting process.</p> <p>If you are using a TOML-formatted configuration file, you must also escape backslashes (<code>\\</code>) in the regular expression. The TOML parser will treat a single backslash as an escape character. </p> <p>The following template:</p> TOMLCFG <pre><code>search = \"{current_version} date-released: \\\\d{{4}}-\\\\d{{2}}-\\\\d{{2}}\"\n</code></pre> <pre><code>search = \"{current_version} date-released: \\d{{4}}-\\d{{2}}-\\d{{2}}\"\n</code></pre> <p>Gets rendered to:</p> <pre><code>1\\.2\\.3 date-released: \\d{4}-\\d{2}-\\d{2}\n</code></pre> <p>This string is used as a regular expression pattern to search.</p>"},{"location":"reference/search-and-replace-config/#regular-expression-special-characters","title":"Regular expression special characters","text":"<p>The <code>.</code>, <code>^</code>, <code>$</code>, <code>*</code>, <code>+</code>, <code>?</code>, <code>()</code>, <code>[]</code>, <code>{}</code>, <code>\\</code>, <code>|</code> characters are special characters in regular expressions. If your search string contains these characters, you must escape them with a backslash (<code>\\</code>) to treat them as literal characters or set the <code>no-regex</code> flag to <code>True</code>.</p> <p>For example, if you are looking for this string in a file:</p> <pre><code>[Unreleased] 2023-07-17\n</code></pre> <p>and you use this search pattern:</p> <pre><code>[Unreleased] \\\\d{{4}}-\\\\d{{2}}-\\\\d{{2}}\n</code></pre> <p>Bump My Version will not find the string. While the rendered regular expression <code>[Unreleased] \\d{4}-\\d{2}-\\d{2}</code> is valid, it is not searching for the literal <code>[Unreleased]</code>. Instead, it matches a single character in the list <code>U</code>, <code>n</code>, <code>r</code>, <code>e</code>, <code>l</code>, <code>a</code>, <code>s</code>, <code>d</code>.</p> <p>You must escape the <code>[</code> and <code>]</code> to treat them as literal characters:</p> <pre><code>\\[Unreleased\\] \\\\d{{4}}-\\\\d{{2}}-\\\\d{{2}}\n</code></pre>"},{"location":"reference/api/nav/","title":"Nav","text":"<ul> <li> bumpversion     *  aliases     *  autocast     *  bump     *  cli     *  config         *  create         *  files         *  files_legacy         *  models         *  utils     *  context     *  exceptions     *  files     *  hooks     *  indented_logger     *  scm     *  show     *  ui     *  utils     *  versioning         *  conventions         *  functions         *  models         *  serialization         *  version_config     *  visualize     *  yaml_dump</li> </ul>"},{"location":"reference/api/bumpversion/","title":"Index","text":""},{"location":"reference/api/bumpversion/aliases/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> aliases","text":"<p>Utilities for handling command aliases.</p>"},{"location":"reference/api/bumpversion/aliases/#bumpversion.aliases-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/aliases/#bumpversion.aliases.AliasedGroup","title":"AliasedGroup","text":"<p>               Bases: <code>RichGroup</code></p> <p>This following example implements a subclass of Group that accepts a prefix for a command.</p> <p>If there were a command called <code>push</code>, it would accept <code>pus</code> as an alias (so long as it was unique)</p>"},{"location":"reference/api/bumpversion/aliases/#bumpversion.aliases.AliasedGroup-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/aliases/#bumpversion.aliases.AliasedGroup.get_command","title":"get_command","text":"<pre><code>get_command(\n    ctx: Context, cmd_name: str\n) -&gt; Optional[click.Command]\n</code></pre> <p>Given a context and a command name, this returns a Command object if it exists or returns None.</p>"},{"location":"reference/api/bumpversion/aliases/#bumpversion.aliases.AliasedGroup.resolve_command","title":"resolve_command","text":"<pre><code>resolve_command(ctx: Context, args: List[str]) -&gt; tuple\n</code></pre> <p>Find the command and make sure the full command name is returned.</p>"},{"location":"reference/api/bumpversion/aliases/#bumpversion.aliases-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/autocast/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> autocast","text":"<p>Automatically detect the true Python type of a string and cast it to the correct type.</p> <p>Based on https://github.com/cgreer/cgAutoCast/blob/master/cgAutoCast.py</p> <p>Only used by Legacy configuration file parser.</p>"},{"location":"reference/api/bumpversion/autocast/#bumpversion.autocast-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/autocast/#bumpversion.autocast.autocast_value","title":"autocast_value","text":"<pre><code>autocast_value(var: Any) -&gt; Any\n</code></pre> <p>Guess the string representation of the variable\u2019s type.</p> <p>Parameters:</p> <code>var</code> <p>Value to autocast.</p> <p> TYPE: <code>Any</code> </p> <p>Returns:</p> <code>Any</code> <p>The autocasted value.</p>"},{"location":"reference/api/bumpversion/autocast/#bumpversion.autocast.boolify","title":"boolify","text":"<pre><code>boolify(s: str) -&gt; bool\n</code></pre> <p>Convert a string to a boolean.</p>"},{"location":"reference/api/bumpversion/autocast/#bumpversion.autocast.listify","title":"listify","text":"<pre><code>listify(s: str) -&gt; list\n</code></pre> <p>Convert a string representation of a list into list of homogeneous basic types.</p> <p>Type of elements in list is determined via first element. Successive elements are cast to that type.</p> <p>Parameters:</p> <code>s</code> <p>String representation of a list.</p> <p> TYPE: <code>str</code> </p> <p>Raises:</p> <code>ValueError</code> <p>If string does not represent a list.</p> <code>TypeError</code> <p>If string does not represent a list of homogeneous basic types.</p> <p>Returns:</p> <code>list</code> <p>List of homogeneous basic types.</p>"},{"location":"reference/api/bumpversion/autocast/#bumpversion.autocast.noneify","title":"noneify","text":"<pre><code>noneify(s: str) -&gt; None\n</code></pre> <p>Convert a string to None.</p>"},{"location":"reference/api/bumpversion/bump/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> bump","text":"<p>Version changing methods.</p>"},{"location":"reference/api/bumpversion/bump/#bumpversion.bump-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/bump/#bumpversion.bump-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/bump/#bumpversion.bump.commit_and_tag","title":"commit_and_tag","text":"<pre><code>commit_and_tag(\n    config: Config,\n    config_file: Optional[Path],\n    configured_files: List[ConfiguredFile],\n    ctx: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Commit and tag the changes if a tool is configured.</p> <p>Parameters:</p> <code>config</code> <p>The configuration</p> <p> TYPE: <code>Config</code> </p> <code>config_file</code> <p>The configuration file to include in the commit, if it exists</p> <p> TYPE: <code>Optional[Path]</code> </p> <code>configured_files</code> <p>A list of files to commit</p> <p> TYPE: <code>List[ConfiguredFile]</code> </p> <code>ctx</code> <p>The context used to render the tag and tag message</p> <p> TYPE: <code>MutableMapping</code> </p> <code>dry_run</code> <p>True if the operation should be a dry run</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/bump/#bumpversion.bump.do_bump","title":"do_bump","text":"<pre><code>do_bump(\n    version_part: Optional[str],\n    new_version: Optional[str],\n    config: Config,\n    config_file: Optional[Path] = None,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Bump the version_part to the next value or set the version to new_version.</p> <p>Parameters:</p> <code>version_part</code> <p>The name of the version component to bump</p> <p> TYPE: <code>Optional[str]</code> </p> <code>new_version</code> <p>The explicit version to set</p> <p> TYPE: <code>Optional[str]</code> </p> <code>config</code> <p>The configuration to use</p> <p> TYPE: <code>Config</code> </p> <code>config_file</code> <p>The configuration file to update</p> <p> TYPE: <code>Optional[Path]</code> </p><p> DEFAULT: <code>None</code> </p> <code>dry_run</code> <p>True if the operation should be a dry run</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/bump/#bumpversion.bump.get_next_version","title":"get_next_version","text":"<pre><code>get_next_version(\n    current_version: Version,\n    config: Config,\n    version_part: Optional[str],\n    new_version: Optional[str],\n) -&gt; Version\n</code></pre> <p>Bump the version_part to the next value.</p> <p>Parameters:</p> <code>current_version</code> <p>The current version</p> <p> TYPE: <code>Version</code> </p> <code>config</code> <p>The current configuration</p> <p> TYPE: <code>Config</code> </p> <code>version_part</code> <p>Optional part of the version to bump</p> <p> TYPE: <code>Optional[str]</code> </p> <code>new_version</code> <p>Optional specific version to bump to</p> <p> TYPE: <code>Optional[str]</code> </p> <p>Returns:</p> <code>Version</code> <p>The new version</p> <p>Raises:</p> <code>ConfigurationError</code> <p>If it can\u2019t generate the next version.</p>"},{"location":"reference/api/bumpversion/cli/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> cli","text":"<p>bump-my-version Command line interface.</p>"},{"location":"reference/api/bumpversion/cli/#bumpversion.cli-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/cli/#bumpversion.cli-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/cli/#bumpversion.cli.bump","title":"bump","text":"<pre><code>bump(\n    args: list,\n    config_file: Optional[str],\n    verbose: int,\n    allow_dirty: Optional[bool],\n    current_version: Optional[str],\n    new_version: Optional[str],\n    parse: Optional[str],\n    serialize: Optional[List[str]],\n    search: Optional[str],\n    replace: Optional[str],\n    regex: Optional[bool],\n    no_configured_files: bool,\n    ignore_missing_files: bool,\n    ignore_missing_version: bool,\n    dry_run: bool,\n    commit: Optional[bool],\n    tag: Optional[bool],\n    sign_tags: Optional[bool],\n    tag_name: Optional[str],\n    tag_message: Optional[str],\n    message: Optional[str],\n    commit_args: Optional[str],\n) -&gt; None\n</code></pre> <p>Change the version.</p> <p>ARGS may contain any of the following:</p> <p>VERSION_PART is the part of the version to increase, e.g. <code>minor</code>. Valid values include those given in the <code>--serialize</code> / <code>--parse</code> option.</p> <p>FILES are additional file(s) to modify. If you want to rewrite only files specified on the command line, use with the <code>--no-configured-files</code> option.</p>"},{"location":"reference/api/bumpversion/cli/#bumpversion.cli.cli","title":"cli","text":"<pre><code>cli(ctx: Context) -&gt; None\n</code></pre> <p>Version bump your Python project.</p>"},{"location":"reference/api/bumpversion/cli/#bumpversion.cli.replace","title":"replace","text":"<pre><code>replace(\n    files: list,\n    config_file: Optional[str],\n    verbose: int,\n    allow_dirty: Optional[bool],\n    current_version: Optional[str],\n    new_version: Optional[str],\n    parse: Optional[str],\n    serialize: Optional[List[str]],\n    search: Optional[str],\n    replace: Optional[str],\n    regex: bool,\n    no_configured_files: bool,\n    ignore_missing_version: bool,\n    ignore_missing_files: bool,\n    dry_run: bool,\n) -&gt; None\n</code></pre> <p>Replace the version in files.</p> <p>FILES are additional file(s) to modify. If you want to rewrite only files specified on the command line, use with the <code>--no-configured-files</code> option.</p>"},{"location":"reference/api/bumpversion/cli/#bumpversion.cli.sample_config","title":"sample_config","text":"<pre><code>sample_config(prompt: bool, destination: str) -&gt; None\n</code></pre> <p>Print a sample configuration file.</p>"},{"location":"reference/api/bumpversion/cli/#bumpversion.cli.show","title":"show","text":"<pre><code>show(\n    args: List[str],\n    config_file: Optional[str],\n    format_: str,\n    increment: Optional[str],\n) -&gt; None\n</code></pre> <p>Show current configuration information.</p> <p>ARGS may contain one or more configuration attributes. For example:</p> <ul> <li><code>bump-my-version show current_version</code></li> </ul> <ul> <li><code>bump-my-version show files.0.filename</code></li> </ul> <ul> <li><code>bump-my-version show scm_info.branch_name</code></li> </ul> <ul> <li><code>bump-my-version show current_version scm_info.distance_to_latest_tag</code></li> </ul>"},{"location":"reference/api/bumpversion/cli/#bumpversion.cli.show_bump","title":"show_bump","text":"<pre><code>show_bump(\n    version: str,\n    config_file: Optional[str],\n    ascii: bool,\n    verbose: int,\n) -&gt; None\n</code></pre> <p>Show the possible versions resulting from the bump subcommand.</p>"},{"location":"reference/api/bumpversion/context/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> context","text":"<p>Context for rendering messages and tags.</p>"},{"location":"reference/api/bumpversion/context/#bumpversion.context-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/context/#bumpversion.context-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/context/#bumpversion.context.base_context","title":"base_context","text":"<pre><code>base_context(\n    scm_info: Optional[SCMInfo] = None,\n) -&gt; ChainMap\n</code></pre> <p>The default context for rendering messages and tags.</p>"},{"location":"reference/api/bumpversion/context/#bumpversion.context.calver_string_to_regex","title":"calver_string_to_regex","text":"<pre><code>calver_string_to_regex(calver_format: str) -&gt; str\n</code></pre> <p>Convert the calver format string to a regex pattern.</p>"},{"location":"reference/api/bumpversion/context/#bumpversion.context.get_context","title":"get_context","text":"<pre><code>get_context(\n    config: Config,\n    current_version: Optional[Version] = None,\n    new_version: Optional[Version] = None,\n) -&gt; ChainMap\n</code></pre> <p>Return the context for rendering messages and tags.</p>"},{"location":"reference/api/bumpversion/context/#bumpversion.context.get_datetime_info","title":"get_datetime_info","text":"<pre><code>get_datetime_info(current_dt: datetime.datetime) -&gt; dict\n</code></pre> <p>Return the full structure of the given datetime for formatting.</p>"},{"location":"reference/api/bumpversion/context/#bumpversion.context.prefixed_environ","title":"prefixed_environ","text":"<pre><code>prefixed_environ() -&gt; dict\n</code></pre> <p>Return a dict of the environment with keys wrapped in <code>${}</code>.</p>"},{"location":"reference/api/bumpversion/exceptions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> exceptions","text":"<p>Custom exceptions for BumpVersion.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.BadInputError","title":"BadInputError","text":"<pre><code>BadInputError(message: str, ctx: Optional[Context] = None)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>User input was bad.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.BumpVersionError","title":"BumpVersionError","text":"<pre><code>BumpVersionError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>UsageError</code></p> <p>Custom base class for all BumpVersion exception types.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.ConfigurationError","title":"ConfigurationError","text":"<pre><code>ConfigurationError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>A configuration key-value is missing or in the wrong type.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.DirtyWorkingDirectoryError","title":"DirtyWorkingDirectoryError","text":"<pre><code>DirtyWorkingDirectoryError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>The working directory is dirty, and it is not allowed.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.FormattingError","title":"FormattingError","text":"<pre><code>FormattingError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>We are unable to represent a version required by a format.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.InvalidVersionPartError","title":"InvalidVersionPartError","text":"<pre><code>InvalidVersionPartError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>The specified part (e.g. \u2018bugfix\u2019) was not found.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.MissingValueError","title":"MissingValueError","text":"<pre><code>MissingValueError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>A part required for a version format is empty.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.SignedTagsError","title":"SignedTagsError","text":"<pre><code>SignedTagsError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>The VCS does not support signed tags.</p>"},{"location":"reference/api/bumpversion/exceptions/#bumpversion.exceptions.VersionNotFoundError","title":"VersionNotFoundError","text":"<pre><code>VersionNotFoundError(\n    message: str, ctx: Optional[Context] = None\n)\n</code></pre> <p>               Bases: <code>BumpVersionError</code></p> <p>A version number was not found in a source file.</p>"},{"location":"reference/api/bumpversion/files/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> files","text":"<p>Methods for changing files.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/files/#bumpversion.files.ConfiguredFile","title":"ConfiguredFile","text":"<pre><code>ConfiguredFile(\n    file_change: FileChange,\n    version_config: VersionConfig,\n    search: Optional[str] = None,\n    replace: Optional[str] = None,\n)\n</code></pre> <p>A file to modify in a configured way.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.ConfiguredFile-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/files/#bumpversion.files.ConfiguredFile.get_file_contents","title":"get_file_contents","text":"<pre><code>get_file_contents() -&gt; str\n</code></pre> <p>Return the contents of the file.</p> <p>Raises:</p> <code>FileNotFoundError</code> <p>if the file doesn\u2019t exist</p> <p>Returns:</p> <code>str</code> <p>The contents of the file</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.ConfiguredFile.make_file_change","title":"make_file_change","text":"<pre><code>make_file_change(\n    current_version: Version,\n    new_version: Version,\n    context: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Make the change to the file.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.ConfiguredFile.write_file_contents","title":"write_file_contents","text":"<pre><code>write_file_contents(contents: str) -&gt; None\n</code></pre> <p>Write the contents of the file.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.DataFileUpdater","title":"DataFileUpdater","text":"<pre><code>DataFileUpdater(\n    file_change: FileChange,\n    version_part_configs: Dict[str, VersionComponentSpec],\n)\n</code></pre> <p>A class to handle updating files.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.DataFileUpdater-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/files/#bumpversion.files.DataFileUpdater.update_file","title":"update_file","text":"<pre><code>update_file(\n    current_version: Version,\n    new_version: Version,\n    context: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Update the files.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.FileUpdater","title":"FileUpdater","text":"<pre><code>FileUpdater(\n    file_change: FileChange,\n    version_config: VersionConfig,\n    search: Optional[str] = None,\n    replace: Optional[str] = None,\n)\n</code></pre> <p>A class to handle updating files.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.FileUpdater-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/files/#bumpversion.files.FileUpdater.update_file","title":"update_file","text":"<pre><code>update_file(\n    current_version: Version,\n    new_version: Version,\n    context: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Update the files.</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/files/#bumpversion.files.contains_pattern","title":"contains_pattern","text":"<pre><code>contains_pattern(search: re.Pattern, contents: str) -&gt; bool\n</code></pre> <p>Does the search pattern match any part of the contents?</p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.log_changes","title":"log_changes","text":"<pre><code>log_changes(\n    file_path: str,\n    file_content_before: str,\n    file_content_after: str,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Log the changes that would be made to the file.</p> <p>Parameters:</p> <code>file_path</code> <p>The path to the file</p> <p> TYPE: <code>str</code> </p> <code>file_content_before</code> <p>The file contents before the change</p> <p> TYPE: <code>str</code> </p> <code>file_content_after</code> <p>The file contents after the change</p> <p> TYPE: <code>str</code> </p> <code>dry_run</code> <p>True if this is a report-only job</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.modify_files","title":"modify_files","text":"<pre><code>modify_files(\n    files: List[ConfiguredFile],\n    current_version: Version,\n    new_version: Version,\n    context: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Modify the files, searching and replacing values according to the FileConfig.</p> <p>Parameters:</p> <code>files</code> <p>The list of configured files</p> <p> TYPE: <code>List[ConfiguredFile]</code> </p> <code>current_version</code> <p>The current version</p> <p> TYPE: <code>Version</code> </p> <code>new_version</code> <p>The next version</p> <p> TYPE: <code>Version</code> </p> <code>context</code> <p>The context used for rendering the version</p> <p> TYPE: <code>MutableMapping</code> </p> <code>dry_run</code> <p>True if this should be a report-only job</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/files/#bumpversion.files.resolve_file_config","title":"resolve_file_config","text":"<pre><code>resolve_file_config(\n    files: List[FileChange],\n    version_config: VersionConfig,\n    search: Optional[str] = None,\n    replace: Optional[str] = None,\n) -&gt; List[ConfiguredFile]\n</code></pre> <p>Resolve the files, searching and replacing values according to the FileConfig.</p> <p>Parameters:</p> <code>files</code> <p>A list of file configurations</p> <p> TYPE: <code>List[FileChange]</code> </p> <code>version_config</code> <p>How the version should be changed</p> <p> TYPE: <code>VersionConfig</code> </p> <code>search</code> <p>The search pattern to use instead of any configured search pattern</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>replace</code> <p>The replace pattern to use instead of any configured replace pattern</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>List[ConfiguredFile]</code> <p>A list of ConfiguredFiles</p>"},{"location":"reference/api/bumpversion/hooks/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> hooks","text":"<p>Implementation of the hook interface.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.base_env","title":"base_env","text":"<pre><code>base_env(config: Config) -&gt; Dict[str, str]\n</code></pre> <p>Provide the base environment variables.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.get_post_commit_hook_env","title":"get_post_commit_hook_env","text":"<pre><code>get_post_commit_hook_env(\n    config: Config,\n    current_version: Version,\n    new_version: Version,\n) -&gt; Dict[str, str]\n</code></pre> <p>Provide the environment dictionary for <code>post_commit_hook</code>s.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.get_pre_commit_hook_env","title":"get_pre_commit_hook_env","text":"<pre><code>get_pre_commit_hook_env(\n    config: Config,\n    current_version: Version,\n    new_version: Version,\n) -&gt; Dict[str, str]\n</code></pre> <p>Provide the environment dictionary for <code>pre_commit_hook</code>s.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.get_setup_hook_env","title":"get_setup_hook_env","text":"<pre><code>get_setup_hook_env(\n    config: Config, current_version: Version\n) -&gt; Dict[str, str]\n</code></pre> <p>Provide the environment dictionary for <code>setup_hook</code>s.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.run_command","title":"run_command","text":"<pre><code>run_command(\n    script: str, environment: Optional[dict] = None\n) -&gt; subprocess.CompletedProcess\n</code></pre> <p>Runs command-line programs using the shell.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.run_hooks","title":"run_hooks","text":"<pre><code>run_hooks(\n    hooks: List[str],\n    env: Dict[str, str],\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Run a list of command-line programs using the shell.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.run_post_commit_hooks","title":"run_post_commit_hooks","text":"<pre><code>run_post_commit_hooks(\n    config: Config,\n    current_version: Version,\n    new_version: Version,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Run the post-commit hooks.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.run_pre_commit_hooks","title":"run_pre_commit_hooks","text":"<pre><code>run_pre_commit_hooks(\n    config: Config,\n    current_version: Version,\n    new_version: Version,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Run the pre-commit hooks.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.run_setup_hooks","title":"run_setup_hooks","text":"<pre><code>run_setup_hooks(\n    config: Config,\n    current_version: Version,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Run the setup hooks.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.scm_env","title":"scm_env","text":"<pre><code>scm_env(config: Config) -&gt; Dict[str, str]\n</code></pre> <p>Provide the scm environment variables.</p>"},{"location":"reference/api/bumpversion/hooks/#bumpversion.hooks.version_env","title":"version_env","text":"<pre><code>version_env(\n    version: Version, version_prefix: str\n) -&gt; Dict[str, str]\n</code></pre> <p>Provide the environment variables for each version component with a prefix.</p>"},{"location":"reference/api/bumpversion/indented_logger/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> indented_logger","text":"<p>A logger adapter that adds an indent to the beginning of each message.</p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter","title":"IndentedLoggerAdapter","text":"<pre><code>IndentedLoggerAdapter(\n    logger: logging.Logger,\n    extra: Optional[dict] = None,\n    depth: int = 2,\n    indent_char: str = \" \",\n    reset: bool = False,\n)\n</code></pre> <p>               Bases: <code>LoggerAdapter</code></p> <p>Logger adapter that adds an indent to the beginning of each message.</p> <p>Parameters:</p> <code>logger</code> <p>The logger to adapt.</p> <p> TYPE: <code>Logger</code> </p> <code>extra</code> <p>Extra values to add to the logging context.</p> <p> TYPE: <code>Optional[dict]</code> </p><p> DEFAULT: <code>None</code> </p> <code>depth</code> <p>The number of <code>indent_char</code> to generate for each indent level.</p> <p> TYPE: <code>int</code> </p><p> DEFAULT: <code>2</code> </p> <code>indent_char</code> <p>The character or string to use for indenting.</p> <p> TYPE: <code>str</code> </p><p> DEFAULT: <code>' '</code> </p> <code>reset</code> <p><code>True</code> if the indent level should be reset to zero.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter-attributes","title":"Attributes","text":""},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter.current_indent","title":"current_indent  <code>property</code>","text":"<pre><code>current_indent: int\n</code></pre> <p>The current indent level.</p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter.indent_str","title":"indent_str  <code>property</code>","text":"<pre><code>indent_str: str\n</code></pre> <p>The indent string.</p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter.dedent","title":"dedent","text":"<pre><code>dedent(amount: int = 1) -&gt; None\n</code></pre> <p>Decrease the indent level by <code>amount</code>.</p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter.indent","title":"indent","text":"<pre><code>indent(amount: int = 1) -&gt; None\n</code></pre> <p>Increase the indent level by <code>amount</code>.</p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter.process","title":"process","text":"<pre><code>process(\n    msg: str, kwargs: Optional[MutableMapping[str, Any]]\n) -&gt; Tuple[str, MutableMapping[str, Any]]\n</code></pre> <p>Process the message and add the indent.</p> <p>Parameters:</p> <code>msg</code> <p>The logging message.</p> <p> TYPE: <code>str</code> </p> <code>kwargs</code> <p>Keyword arguments passed to the logger.</p> <p> TYPE: <code>Optional[MutableMapping[str, Any]]</code> </p> <p>Returns:</p> <code>Tuple[str, MutableMapping[str, Any]]</code> <p>A tuple containing the message and keyword arguments.</p>"},{"location":"reference/api/bumpversion/indented_logger/#bumpversion.indented_logger.IndentedLoggerAdapter.reset","title":"reset","text":"<pre><code>reset() -&gt; None\n</code></pre> <p>Reset the indent level to zero.</p>"},{"location":"reference/api/bumpversion/scm/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> scm","text":"<p>Version control system management.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Git","title":"Git","text":"<p>               Bases: <code>SourceCodeManager</code></p> <p>Git implementation.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Git-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Git.add_path","title":"add_path  <code>classmethod</code>","text":"<pre><code>add_path(path: Union[str, Path]) -&gt; None\n</code></pre> <p>Add a path to the VCS.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Git.assert_nondirty","title":"assert_nondirty  <code>classmethod</code>","text":"<pre><code>assert_nondirty() -&gt; None\n</code></pre> <p>Assert that the working directory is not dirty.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Git.latest_tag_info","title":"latest_tag_info  <code>classmethod</code>","text":"<pre><code>latest_tag_info(\n    tag_name: str, parse_pattern: str\n) -&gt; SCMInfo\n</code></pre> <p>Return information about the latest tag.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Git.tag","title":"tag  <code>classmethod</code>","text":"<pre><code>tag(\n    name: str,\n    sign: bool = False,\n    message: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Create a tag of the new_version in VCS.</p> <p>If only name is given, bumpversion uses a lightweight tag. Otherwise, it uses an annotated tag.</p> <p>Parameters:</p> <code>name</code> <p>The name of the tag</p> <p> TYPE: <code>str</code> </p> <code>sign</code> <p>True to sign the tag</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>message</code> <p>An optional message to annotate the tag.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Mercurial","title":"Mercurial","text":"<p>               Bases: <code>SourceCodeManager</code></p> <p>Mercurial implementation.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Mercurial-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Mercurial.add_path","title":"add_path  <code>classmethod</code>","text":"<pre><code>add_path(path: Union[str, Path]) -&gt; None\n</code></pre> <p>Add a path to the VCS.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Mercurial.assert_nondirty","title":"assert_nondirty  <code>classmethod</code>","text":"<pre><code>assert_nondirty() -&gt; None\n</code></pre> <p>Assert that the working directory is clean.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Mercurial.latest_tag_info","title":"latest_tag_info  <code>classmethod</code>","text":"<pre><code>latest_tag_info(\n    tag_name: str, parse_pattern: str\n) -&gt; SCMInfo\n</code></pre> <p>Return information about the latest tag.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.Mercurial.tag","title":"tag  <code>classmethod</code>","text":"<pre><code>tag(\n    name: str,\n    sign: bool = False,\n    message: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Create a tag of the new_version in VCS.</p> <p>If only name is given, bumpversion uses a lightweight tag. Otherwise, it uses an annotated tag.</p> <p>Parameters:</p> <code>name</code> <p>The name of the tag</p> <p> TYPE: <code>str</code> </p> <code>sign</code> <p>True to sign the tag</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>message</code> <p>A optional message to annotate the tag.</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Raises:</p> <code>SignedTagsError</code> <p>If <code>sign</code> is <code>True</code></p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SCMInfo","title":"SCMInfo  <code>dataclass</code>","text":"<pre><code>SCMInfo(\n    tool: Optional[Type[SourceCodeManager]] = None,\n    commit_sha: Optional[str] = None,\n    distance_to_latest_tag: int = 0,\n    current_version: Optional[str] = None,\n    current_tag: Optional[str] = None,\n    branch_name: Optional[str] = None,\n    short_branch_name: Optional[str] = None,\n    repository_root: Optional[Path] = None,\n    dirty: Optional[bool] = None,\n)\n</code></pre> <p>Information about the current source code manager and state.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SCMInfo-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SCMInfo.path_in_repo","title":"path_in_repo","text":"<pre><code>path_in_repo(path: Union[Path, str]) -&gt; bool\n</code></pre> <p>Return whether a path is inside this repository.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager","title":"SourceCodeManager","text":"<p>Base class for version control systems.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.add_path","title":"add_path  <code>classmethod</code>","text":"<pre><code>add_path(path: Union[str, Path]) -&gt; None\n</code></pre> <p>Add a path to the VCS.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.assert_nondirty","title":"assert_nondirty  <code>classmethod</code>","text":"<pre><code>assert_nondirty() -&gt; None\n</code></pre> <p>Assert that the working directory is not dirty.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.commit","title":"commit  <code>classmethod</code>","text":"<pre><code>commit(\n    message: str,\n    current_version: str,\n    new_version: str,\n    extra_args: Optional[list] = None,\n) -&gt; None\n</code></pre> <p>Commit the changes.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.commit_to_scm","title":"commit_to_scm  <code>classmethod</code>","text":"<pre><code>commit_to_scm(\n    files: List[Union[str, Path]],\n    config: Config,\n    context: MutableMapping,\n    extra_args: Optional[List[str]] = None,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Commit the files to the source code management system.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.format_and_raise_error","title":"format_and_raise_error  <code>classmethod</code>","text":"<pre><code>format_and_raise_error(\n    exc: Union[TypeError, subprocess.CalledProcessError]\n) -&gt; None\n</code></pre> <p>Format the error message from an exception and re-raise it as a BumpVersionError.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.get_all_tags","title":"get_all_tags  <code>classmethod</code>","text":"<pre><code>get_all_tags() -&gt; List[str]\n</code></pre> <p>Return all tags in VCS.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.get_version_from_tag","title":"get_version_from_tag  <code>classmethod</code>","text":"<pre><code>get_version_from_tag(\n    tag: str, tag_name: str, parse_pattern: str\n) -&gt; Optional[str]\n</code></pre> <p>Return the version from a tag.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.is_usable","title":"is_usable  <code>classmethod</code>","text":"<pre><code>is_usable() -&gt; bool\n</code></pre> <p>Is the VCS implementation usable.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.latest_tag_info","title":"latest_tag_info  <code>classmethod</code>","text":"<pre><code>latest_tag_info(\n    tag_name: str, parse_pattern: str\n) -&gt; SCMInfo\n</code></pre> <p>Return information about the latest tag.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.tag","title":"tag  <code>classmethod</code>","text":"<pre><code>tag(\n    name: str,\n    sign: bool = False,\n    message: Optional[str] = None,\n) -&gt; None\n</code></pre> <p>Create a tag of the new_version in VCS.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.SourceCodeManager.tag_in_scm","title":"tag_in_scm  <code>classmethod</code>","text":"<pre><code>tag_in_scm(\n    config: Config,\n    context: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Tag the current commit in the source code management system.</p>"},{"location":"reference/api/bumpversion/scm/#bumpversion.scm-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/scm/#bumpversion.scm.get_scm_info","title":"get_scm_info","text":"<pre><code>get_scm_info(tag_name: str, parse_pattern: str) -&gt; SCMInfo\n</code></pre> <p>Return a dict with the latest source code management info.</p>"},{"location":"reference/api/bumpversion/show/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> show","text":"<p>Functions for displaying information about the version.</p>"},{"location":"reference/api/bumpversion/show/#bumpversion.show-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/show/#bumpversion.show-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/show/#bumpversion.show.do_show","title":"do_show","text":"<pre><code>do_show(\n    *args,\n    config: Config,\n    format_: str = \"default\",\n    increment: Optional[str] = None\n) -&gt; None\n</code></pre> <p>Show current version or configuration information.</p>"},{"location":"reference/api/bumpversion/show/#bumpversion.show.output_default","title":"output_default","text":"<pre><code>output_default(value: dict) -&gt; None\n</code></pre> <p>Output the value with key=value or just value if there is only one item.</p>"},{"location":"reference/api/bumpversion/show/#bumpversion.show.output_json","title":"output_json","text":"<pre><code>output_json(value: dict) -&gt; None\n</code></pre> <p>Output the value as json.</p>"},{"location":"reference/api/bumpversion/show/#bumpversion.show.output_yaml","title":"output_yaml","text":"<pre><code>output_yaml(value: dict) -&gt; None\n</code></pre> <p>Output the value as yaml.</p>"},{"location":"reference/api/bumpversion/show/#bumpversion.show.resolve_name","title":"resolve_name","text":"<pre><code>resolve_name(\n    obj: Any,\n    name: str,\n    default: Any = None,\n    err_on_missing: bool = False,\n) -&gt; Any\n</code></pre> <p>Get a key or attr <code>name</code> from obj or default value.</p> <p>Copied and modified from Django Template variable resolutions</p> <p>Resolution methods:</p> <ul> <li>Mapping key lookup</li> <li>Attribute lookup</li> <li>Sequence index</li> </ul> <p>Parameters:</p> <code>obj</code> <p>The object to access</p> <p> TYPE: <code>Any</code> </p> <code>name</code> <p>A dotted name to the value, such as <code>mykey.0.name</code></p> <p> TYPE: <code>str</code> </p> <code>default</code> <p>If the name cannot be resolved from the object, return this value</p> <p> TYPE: <code>Any</code> </p><p> DEFAULT: <code>None</code> </p> <code>err_on_missing</code> <p>Raise a <code>BadInputError</code> if the name cannot be resolved</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>Any</code> <p>The value at the resolved name or the default value.</p> <p>Raises:</p> <code>BadInputError</code> <p>If we cannot resolve the name and <code>err_on_missing</code> is <code>True</code></p>"},{"location":"reference/api/bumpversion/show/#bumpversion.show.resolve_name--noqa-dar401","title":"noqa: DAR401","text":""},{"location":"reference/api/bumpversion/ui/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> ui","text":"<p>Utilities for user interface.</p>"},{"location":"reference/api/bumpversion/ui/#bumpversion.ui-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/ui/#bumpversion.ui-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/ui/#bumpversion.ui.get_indented_logger","title":"get_indented_logger","text":"<pre><code>get_indented_logger(name: str) -&gt; IndentedLoggerAdapter\n</code></pre> <p>Get a logger with indentation.</p>"},{"location":"reference/api/bumpversion/ui/#bumpversion.ui.print_error","title":"print_error","text":"<pre><code>print_error(msg: str) -&gt; None\n</code></pre> <p>Raise an error and exit.</p>"},{"location":"reference/api/bumpversion/ui/#bumpversion.ui.print_info","title":"print_info","text":"<pre><code>print_info(msg: str) -&gt; None\n</code></pre> <p>Echo a message to the console.</p>"},{"location":"reference/api/bumpversion/ui/#bumpversion.ui.print_warning","title":"print_warning","text":"<pre><code>print_warning(msg: str) -&gt; None\n</code></pre> <p>Echo a warning to the console.</p>"},{"location":"reference/api/bumpversion/ui/#bumpversion.ui.setup_logging","title":"setup_logging","text":"<pre><code>setup_logging(verbose: int = 0) -&gt; None\n</code></pre> <p>Configure the logging.</p>"},{"location":"reference/api/bumpversion/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":"<p>General utilities.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/utils/#bumpversion.utils-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.extract_regex_flags","title":"extract_regex_flags","text":"<pre><code>extract_regex_flags(regex_pattern: str) -&gt; Tuple[str, str]\n</code></pre> <p>Extract the regex flags from the regex pattern.</p> <p>Parameters:</p> <code>regex_pattern</code> <p>The pattern that might start with regex flags</p> <p> TYPE: <code>str</code> </p> <p>Returns:</p> <code>Tuple[str, str]</code> <p>A tuple of the regex pattern without the flag string and regex flag string</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.format_and_raise_error","title":"format_and_raise_error","text":"<pre><code>format_and_raise_error(\n    exc: Union[TypeError, subprocess.CalledProcessError]\n) -&gt; None\n</code></pre> <p>Format the error message from an exception and re-raise it as a BumpVersionError.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.get_nested_value","title":"get_nested_value","text":"<pre><code>get_nested_value(d: dict, path: str) -&gt; Any\n</code></pre> <p>Retrieves the value of a nested key in a dictionary based on the given path.</p> <p>Parameters:</p> <code>d</code> <p>The dictionary to search.</p> <p> TYPE: <code>dict</code> </p> <code>path</code> <p>A string representing the path to the nested key, separated by periods.</p> <p> TYPE: <code>str</code> </p> <p>Returns:</p> <code>Any</code> <p>The value of the nested key.</p> <p>Raises:</p> <code>KeyError</code> <p>If a key in the path does not exist.</p> <code>ValueError</code> <p>If an element in the path is not a dictionary.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.get_overrides","title":"get_overrides","text":"<pre><code>get_overrides(**kwargs) -&gt; dict\n</code></pre> <p>Return a dictionary containing only the overridden key-values.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.key_val_string","title":"key_val_string","text":"<pre><code>key_val_string(d: dict) -&gt; str\n</code></pre> <p>Render the dictionary as a comma-delimited key=value string.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.labels_for_format","title":"labels_for_format","text":"<pre><code>labels_for_format(serialize_format: str) -&gt; List[str]\n</code></pre> <p>Return a list of labels for the given serialize_format.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.recursive_sort_dict","title":"recursive_sort_dict","text":"<pre><code>recursive_sort_dict(input_value: Any) -&gt; Any\n</code></pre> <p>Sort a dictionary recursively.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.run_command","title":"run_command","text":"<pre><code>run_command(\n    command: list, env: Optional[dict] = None\n) -&gt; CompletedProcess\n</code></pre> <p>Run a shell command and return its output.</p>"},{"location":"reference/api/bumpversion/utils/#bumpversion.utils.set_nested_value","title":"set_nested_value","text":"<pre><code>set_nested_value(d: dict, value: Any, path: str) -&gt; None\n</code></pre> <p>Sets the value of a nested key in a dictionary based on the given path.</p> <p>Parameters:</p> <code>d</code> <p>The dictionary to search.</p> <p> TYPE: <code>dict</code> </p> <code>value</code> <p>The value to set.</p> <p> TYPE: <code>Any</code> </p> <code>path</code> <p>A string representing the path to the nested key, separated by periods.</p> <p> TYPE: <code>str</code> </p> <p>Raises:</p> <code>ValueError</code> <p>If an element in the path is not a dictionary.</p>"},{"location":"reference/api/bumpversion/visualize/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> visualize","text":"<p>Visualize the bumpversion process.</p>"},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize.Border","title":"Border  <code>dataclass</code>","text":"<pre><code>Border(\n    corner_bottom_right: str,\n    corner_top_right: str,\n    corner_top_left: str,\n    corner_bottom_left: str,\n    divider_left: str,\n    divider_up: str,\n    divider_down: str,\n    divider_right: str,\n    line: str,\n    pipe: str,\n    cross: str,\n)\n</code></pre> <p>A border definition.</p>"},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize.connection_str","title":"connection_str","text":"<pre><code>connection_str(\n    border: Border,\n    has_next: bool = False,\n    has_previous: bool = False,\n) -&gt; str\n</code></pre> <p>Return the correct connection string based on the next and previous.</p> <p>Parameters:</p> <code>border</code> <p>The border definition to draw the lines</p> <p> TYPE: <code>Border</code> </p> <code>has_next</code> <p>If <code>True</code>, there is a next line</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <code>has_previous</code> <p>If <code>True</code>, there is a previous line</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>str</code> <p>A string that connects left-to-right and top-to-bottom based on the next and previous</p>"},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize.filter_version_parts","title":"filter_version_parts","text":"<pre><code>filter_version_parts(config: Config) -&gt; List[str]\n</code></pre> <p>Return the version parts that are in the configuration.</p> <p>Parameters:</p> <code>config</code> <p>The configuration to check against</p> <p> TYPE: <code>Config</code> </p> <p>Returns:</p> <code>List[str]</code> <p>The version parts that are in the configuration</p>"},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize.labeled_line","title":"labeled_line","text":"<pre><code>labeled_line(\n    label: str,\n    border: Border,\n    fit_length: Optional[int] = None,\n) -&gt; str\n</code></pre> <p>Return the version part string with the correct padding.</p> <p>Parameters:</p> <code>label</code> <p>The label to render</p> <p> TYPE: <code>str</code> </p> <code>border</code> <p>The border definition to draw the lines</p> <p> TYPE: <code>Border</code> </p> <code>fit_length</code> <p>The length to fit the label to</p> <p> TYPE: <code>Optional[int]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>str</code> <p>A labeled line with leading and trailing spaces</p>"},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize.lead_string","title":"lead_string","text":"<pre><code>lead_string(\n    version_str: str, border: Border, blank: bool = False\n) -&gt; str\n</code></pre> <p>Return the first part of a string with the bump character or spaces of the correct amount.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; lead_string(\"1.0.0\", Border(*BOX_CHARS[\"light\"]))\n'1.0.0 \u2500\u2500 bump \u2500'\n&gt;&gt;&gt; lead_string(\"1.0.0\", Border(*BOX_CHARS[\"light\"]), blank=True)\n'               '\n</code></pre> <p>Parameters:</p> <code>version_str</code> <p>The string to render as the starting point</p> <p> TYPE: <code>str</code> </p> <code>border</code> <p>The border definition to draw the lines</p> <p> TYPE: <code>Border</code> </p> <code>blank</code> <p>If <code>True</code>, return a blank string the same length as the version bump string</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>str</code> <p>The version bump string or a blank string</p>"},{"location":"reference/api/bumpversion/visualize/#bumpversion.visualize.visualize","title":"visualize","text":"<pre><code>visualize(\n    config: Config,\n    version_str: str,\n    box_style: str = \"light\",\n) -&gt; None\n</code></pre> <p>Output a visualization of the bump-my-version bump process.</p>"},{"location":"reference/api/bumpversion/yaml_dump/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> yaml_dump","text":"<p>A simple YAML dumper to avoid extra dependencies.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.YAMLDumpers","title":"YAMLDumpers","text":"<p>               Bases: <code>UserDict</code></p> <p>Registry of YAML dumpers.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.YAMLDumpers-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.YAMLDumpers.add_dumper","title":"add_dumper","text":"<pre><code>add_dumper(data_type: type, dumper: DumperFunc) -&gt; None\n</code></pre> <p>Add a YAML dumper.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.dump","title":"dump","text":"<pre><code>dump(data: Any) -&gt; str\n</code></pre> <p>Dump a value to a string buffer.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_bool","title":"format_bool","text":"<pre><code>format_bool(val: bool) -&gt; str\n</code></pre> <p>Return a YAML representation of a bool.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_date","title":"format_date","text":"<pre><code>format_date(val: datetime.date) -&gt; str\n</code></pre> <p>Return a YAML representation of a date.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_datetime","title":"format_datetime","text":"<pre><code>format_datetime(val: datetime.datetime) -&gt; str\n</code></pre> <p>Return a string representation of a value.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_dict","title":"format_dict","text":"<pre><code>format_dict(val: dict) -&gt; str\n</code></pre> <p>Return a YAML representation of a dict.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_float","title":"format_float","text":"<pre><code>format_float(data: float) -&gt; str\n</code></pre> <p>Return a YAML representation of a float.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_int","title":"format_int","text":"<pre><code>format_int(val: int) -&gt; str\n</code></pre> <p>Return a YAML representation of an int.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_none","title":"format_none","text":"<pre><code>format_none(_: None) -&gt; str\n</code></pre> <p>Return a YAML representation of None.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_sequence","title":"format_sequence","text":"<pre><code>format_sequence(val: Union[list, tuple]) -&gt; str\n</code></pre> <p>Return a string representation of a value.</p>"},{"location":"reference/api/bumpversion/yaml_dump/#bumpversion.yaml_dump.format_str","title":"format_str","text":"<pre><code>format_str(val: str) -&gt; str\n</code></pre> <p>Return a YAML representation of a string.</p>"},{"location":"reference/api/bumpversion/config/","title":"Index","text":"<p>Configuration management.</p>"},{"location":"reference/api/bumpversion/config/#bumpversion.config-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/config/#bumpversion.config-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/#bumpversion.config.check_current_version","title":"check_current_version","text":"<pre><code>check_current_version(config: Config) -&gt; str\n</code></pre> <p>Returns the current version.</p> <p>If the current version is not specified in the config file, command line or env variable, it attempts to retrieve it via a tag.</p> <p>Parameters:</p> <code>config</code> <p>The current configuration dictionary.</p> <p> TYPE: <code>Config</code> </p> <p>Returns:</p> <code>str</code> <p>The version number</p> <p>Raises:</p> <code>ConfigurationError</code> <p>If it can\u2019t find the current version</p>"},{"location":"reference/api/bumpversion/config/#bumpversion.config.get_configuration","title":"get_configuration","text":"<pre><code>get_configuration(\n    config_file: Union[str, Path, None] = None,\n    **overrides: Any\n) -&gt; Config\n</code></pre> <p>Return the configuration based on any configuration files and overrides.</p> <p>Parameters:</p> <code>config_file</code> <p>An explicit configuration file to use, otherwise search for one</p> <p> TYPE: <code>Union[str, Path, None]</code> </p><p> DEFAULT: <code>None</code> </p> <code>**overrides</code> <p>Specific configuration key-values to override in the configuration</p> <p> TYPE: <code>Any</code> </p><p> DEFAULT: <code>{}</code> </p> <p>Returns:</p> <code>Config</code> <p>The configuration</p>"},{"location":"reference/api/bumpversion/config/#bumpversion.config.set_config_defaults","title":"set_config_defaults","text":"<pre><code>set_config_defaults(\n    parsed_config: dict[str, Any], **overrides: Any\n) -&gt; dict[str, Any]\n</code></pre> <p>Apply the defaults to the parsed config.</p>"},{"location":"reference/api/bumpversion/config/create/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> create","text":"<p>Module for creating a new config file.</p>"},{"location":"reference/api/bumpversion/config/create/#bumpversion.config.create-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/create/#bumpversion.config.create.create_configuration","title":"create_configuration","text":"<pre><code>create_configuration(\n    destination: str, prompt: bool\n) -&gt; TOMLDocument\n</code></pre> <p>Create a new configuration as a TOMLDocument.</p> <p>Parameters:</p> <code>destination</code> <p><code>stdout</code> or a path to a new or existing file.</p> <p> TYPE: <code>str</code> </p> <code>prompt</code> <p><code>True</code> if the user should be prompted for input.</p> <p> TYPE: <code>bool</code> </p> <p>Returns:</p> <code>TOMLDocument</code> <p>The TOMLDocument structure with the updated configuration.</p>"},{"location":"reference/api/bumpversion/config/create/#bumpversion.config.create.get_defaults_from_dest","title":"get_defaults_from_dest","text":"<pre><code>get_defaults_from_dest(\n    destination: str,\n) -&gt; Tuple[dict, TOMLDocument]\n</code></pre> <p>Get the default configuration and the configuration from the destination.</p>"},{"location":"reference/api/bumpversion/config/files/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> files","text":"<p>Contains methods for finding and reading configuration files.</p>"},{"location":"reference/api/bumpversion/config/files/#bumpversion.config.files-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/config/files/#bumpversion.config.files-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/files/#bumpversion.config.files.find_config_file","title":"find_config_file","text":"<pre><code>find_config_file(\n    explicit_file: Union[str, Path, None] = None\n) -&gt; Union[Path, None]\n</code></pre> <p>Find the configuration file, if it exists.</p> <p>If no explicit configuration file is passed, it will search in several files to find its configuration.</p> <p>Parameters:</p> <code>explicit_file</code> <p>The configuration file to explicitly use.</p> <p> TYPE: <code>Union[str, Path, None]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>Union[Path, None]</code> <p>The configuration file path</p>"},{"location":"reference/api/bumpversion/config/files/#bumpversion.config.files.read_config_file","title":"read_config_file","text":"<pre><code>read_config_file(\n    config_file: Union[str, Path, None] = None\n) -&gt; Dict[str, Any]\n</code></pre> <p>Read the configuration file, if it exists.</p> <p>If no explicit configuration file is passed, it will search in several files to find its configuration.</p> <p>Parameters:</p> <code>config_file</code> <p>The configuration file to explicitly use.</p> <p> TYPE: <code>Union[str, Path, None]</code> </p><p> DEFAULT: <code>None</code> </p> <p>Returns:</p> <code>Dict[str, Any]</code> <p>A dictionary of read key-values</p>"},{"location":"reference/api/bumpversion/config/files/#bumpversion.config.files.read_toml_file","title":"read_toml_file","text":"<pre><code>read_toml_file(file_path: Path) -&gt; Dict[str, Any]\n</code></pre> <p>Parse a TOML file and return the <code>bumpversion</code> section.</p> <p>Parameters:</p> <code>file_path</code> <p>The path to the TOML file.</p> <p> TYPE: <code>Path</code> </p> <p>Returns:</p> <code>dict</code> <p>A dictionary of the <code>bumpversion</code> section.</p> <p> TYPE: <code>Dict[str, Any]</code> </p>"},{"location":"reference/api/bumpversion/config/files/#bumpversion.config.files.update_config_file","title":"update_config_file","text":"<pre><code>update_config_file(\n    config_file: Union[str, Path],\n    config: Config,\n    current_version: Version,\n    new_version: Version,\n    context: MutableMapping,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Update the current_version key in the configuration file.</p> <p>Parameters:</p> <code>config_file</code> <p>The configuration file to explicitly use.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>config</code> <p>The configuration to use.</p> <p> TYPE: <code>Config</code> </p> <code>current_version</code> <p>The current version.</p> <p> TYPE: <code>Version</code> </p> <code>new_version</code> <p>The new version.</p> <p> TYPE: <code>Version</code> </p> <code>context</code> <p>The context to use for serialization.</p> <p> TYPE: <code>MutableMapping</code> </p> <code>dry_run</code> <p>True if the update should be a dry run.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/config/files_legacy/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> files_legacy","text":"<p>This module handles the legacy config file format.</p>"},{"location":"reference/api/bumpversion/config/files_legacy/#bumpversion.config.files_legacy-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/files_legacy/#bumpversion.config.files_legacy.read_ini_file","title":"read_ini_file","text":"<pre><code>read_ini_file(file_path: Path) -&gt; Dict[str, Any]\n</code></pre> <p>Parse an INI file and return a dictionary of sections and their options.</p> <p>Parameters:</p> <code>file_path</code> <p>The path to the INI file.</p> <p> TYPE: <code>Path</code> </p> <p>Returns:</p> <code>dict</code> <p>A dictionary of sections and their options.</p> <p> TYPE: <code>Dict[str, Any]</code> </p>"},{"location":"reference/api/bumpversion/config/files_legacy/#bumpversion.config.files_legacy.update_ini_config_file","title":"update_ini_config_file","text":"<pre><code>update_ini_config_file(\n    config_file: Union[str, Path],\n    current_version: str,\n    new_version: str,\n    dry_run: bool = False,\n) -&gt; None\n</code></pre> <p>Update the current_version key in the configuration file.</p> <p>Instead of parsing and re-writing the config file with new information, it will use a regular expression to just replace the current_version value. The idea is it will avoid unintentional changes (like formatting) to the config file.</p> <p>Parameters:</p> <code>config_file</code> <p>The configuration file to explicitly use.</p> <p> TYPE: <code>Union[str, Path]</code> </p> <code>current_version</code> <p>The serialized current version.</p> <p> TYPE: <code>str</code> </p> <code>new_version</code> <p>The serialized new version.</p> <p> TYPE: <code>str</code> </p> <code>dry_run</code> <p>True if the update should be a dry run.</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p>"},{"location":"reference/api/bumpversion/config/models/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> models","text":"<p>Bump My Version configuration models.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config","title":"Config","text":"<p>               Bases: <code>BaseSettings</code></p> <p>Bump Version configuration.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config-attributes","title":"Attributes","text":""},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config.files_to_modify","title":"files_to_modify  <code>property</code>","text":"<pre><code>files_to_modify: List[FileChange]\n</code></pre> <p>Return a list of files to modify.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config.resolved_filemap","title":"resolved_filemap  <code>property</code>","text":"<pre><code>resolved_filemap: Dict[str, List[FileChange]]\n</code></pre> <p>Return the cached resolved filemap.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config.version_config","title":"version_config  <code>property</code>","text":"<pre><code>version_config: 'VersionConfig'\n</code></pre> <p>Return the version configuration.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config.add_files","title":"add_files","text":"<pre><code>add_files(filename: Union[str, List[str]]) -&gt; None\n</code></pre> <p>Add a filename to the list of files.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.Config.version_spec","title":"version_spec","text":"<pre><code>version_spec(\n    version: Optional[str] = None,\n) -&gt; \"VersionSpec\"\n</code></pre> <p>Return the version specification.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.FileChange","title":"FileChange","text":"<p>               Bases: <code>BaseModel</code></p> <p>A change to make to a file.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.FileChange-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.FileChange.__hash__","title":"__hash__","text":"<pre><code>__hash__()\n</code></pre> <p>Return a hash of the model.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models.FileChange.get_search_pattern","title":"get_search_pattern","text":"<pre><code>get_search_pattern(\n    context: MutableMapping,\n) -&gt; Tuple[re.Pattern, str]\n</code></pre> <p>Render the search pattern and return the compiled regex pattern and the raw pattern.</p> <p>Parameters:</p> <code>context</code> <p>The context to use for rendering the search pattern</p> <p> TYPE: <code>MutableMapping</code> </p> <p>Returns:</p> <code>Tuple[Pattern, str]</code> <p>A tuple of the compiled regex pattern and the raw pattern as a string.</p>"},{"location":"reference/api/bumpversion/config/models/#bumpversion.config.models-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/utils/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> utils","text":"<p>Helper functions for the config module.</p>"},{"location":"reference/api/bumpversion/config/utils/#bumpversion.config.utils-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/config/utils/#bumpversion.config.utils-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/config/utils/#bumpversion.config.utils.get_all_file_configs","title":"get_all_file_configs","text":"<pre><code>get_all_file_configs(config_dict: dict) -&gt; List[FileChange]\n</code></pre> <p>Make sure all version components are included.</p>"},{"location":"reference/api/bumpversion/config/utils/#bumpversion.config.utils.get_all_part_configs","title":"get_all_part_configs","text":"<pre><code>get_all_part_configs(\n    config_dict: dict,\n) -&gt; Dict[str, VersionComponentSpec]\n</code></pre> <p>Make sure all version components are included.</p>"},{"location":"reference/api/bumpversion/config/utils/#bumpversion.config.utils.resolve_glob_files","title":"resolve_glob_files","text":"<pre><code>resolve_glob_files(\n    file_cfg: FileChange,\n) -&gt; List[FileChange]\n</code></pre> <p>Return a list of file configurations that match the glob pattern.</p> <p>Parameters:</p> <code>file_cfg</code> <p>The file configuration containing the glob pattern</p> <p> TYPE: <code>FileChange</code> </p> <p>Returns:</p> <code>List[FileChange]</code> <p>A list of resolved file configurations according to the pattern.</p>"},{"location":"reference/api/bumpversion/versioning/","title":"Index","text":"<p>Module for managing Versions and their internal parts.</p>"},{"location":"reference/api/bumpversion/versioning/conventions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> conventions","text":"<p>Standard version conventions.</p>"},{"location":"reference/api/bumpversion/versioning/conventions/#bumpversion.versioning.conventions-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/versioning/conventions/#bumpversion.versioning.conventions-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/conventions/#bumpversion.versioning.conventions.pep440_version_spec","title":"pep440_version_spec","text":"<pre><code>pep440_version_spec() -&gt; VersionSpec\n</code></pre> <p>Return a VersionSpec for PEP 440.</p>"},{"location":"reference/api/bumpversion/versioning/conventions/#bumpversion.versioning.conventions.semver_spec","title":"semver_spec","text":"<pre><code>semver_spec() -&gt; VersionSpec\n</code></pre> <p>Return a VersionSpec for SEMVER.</p>"},{"location":"reference/api/bumpversion/versioning/functions/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> functions","text":"<p>Generators for version parts.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.CalVerFunction","title":"CalVerFunction","text":"<pre><code>CalVerFunction(calver_format: str)\n</code></pre> <p>               Bases: <code>PartFunction</code></p> <p>This is a class that provides a CalVer function for version parts.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.CalVerFunction-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.CalVerFunction.bump","title":"bump","text":"<pre><code>bump(value: Optional[str] = None) -&gt; str\n</code></pre> <p>Return the optional value.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.IndependentFunction","title":"IndependentFunction","text":"<pre><code>IndependentFunction(value: Union[str, int, None] = None)\n</code></pre> <p>               Bases: <code>PartFunction</code></p> <p>This is a class that provides an independent function for version parts.</p> <p>It simply returns the optional value, which is equal to the first value.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.IndependentFunction-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.IndependentFunction.bump","title":"bump","text":"<pre><code>bump(value: Optional[str] = None) -&gt; str\n</code></pre> <p>Return the optional value.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.NumericFunction","title":"NumericFunction","text":"<pre><code>NumericFunction(\n    optional_value: Union[str, int, None] = None,\n    first_value: Union[str, int, None] = None,\n)\n</code></pre> <p>               Bases: <code>PartFunction</code></p> <p>This is a class that provides a numeric function for version parts.</p> <p>It simply starts with the provided first_value (0 by default) and increases it following the sequence of integer numbers.</p> <p>The optional value of this function is equal to the first value.</p> <p>This function also supports alphanumeric parts, altering just the numeric part (e.g. \u2018r3\u2019 \u2013&gt; \u2018r4\u2019). Only the first numeric group found in the part is considered (e.g. \u2018r3-001\u2019 \u2013&gt; \u2018r4-001\u2019).</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.NumericFunction-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.NumericFunction.bump","title":"bump","text":"<pre><code>bump(value: Union[str, int]) -&gt; str\n</code></pre> <p>Increase the first numerical value by one.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.PartFunction","title":"PartFunction","text":"<p>Base class for a version part function.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.PartFunction-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.PartFunction.bump","title":"bump","text":"<pre><code>bump(value: str) -&gt; str\n</code></pre> <p>Increase the value.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.ValuesFunction","title":"ValuesFunction","text":"<pre><code>ValuesFunction(\n    values: List[str],\n    optional_value: Optional[str] = None,\n    first_value: Optional[str] = None,\n)\n</code></pre> <p>               Bases: <code>PartFunction</code></p> <p>This is a class that provides a values list based function for version parts.</p> <p>It is initialized with a list of values and iterates through them when bumping the part.</p> <p>The default optional value of this function is equal to the first value, but may be otherwise specified.</p> <p>When trying to bump a part which has already the maximum value in the list you get a ValueError exception.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.ValuesFunction-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions.ValuesFunction.bump","title":"bump","text":"<pre><code>bump(value: str) -&gt; str\n</code></pre> <p>Return the item after <code>value</code> in the list.</p>"},{"location":"reference/api/bumpversion/versioning/functions/#bumpversion.versioning.functions-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/models/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> models","text":"<p>Models for managing versioning of software projects.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.Version","title":"Version","text":"<pre><code>Version(\n    version_spec: VersionSpec,\n    components: Dict[str, VersionComponent],\n    original: Optional[str] = None,\n)\n</code></pre> <p>The specification of a version and its parts.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.Version-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.Version.bump","title":"bump","text":"<pre><code>bump(component_name: str) -&gt; 'Version'\n</code></pre> <p>Increase the value of the specified component, reset its dependents, and return a new Version.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.Version.required_components","title":"required_components","text":"<pre><code>required_components() -&gt; List[str]\n</code></pre> <p>Return the names of the parts that are required.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.Version.values","title":"values","text":"<pre><code>values() -&gt; Dict[str, VersionComponent]\n</code></pre> <p>Return the values of the parts.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent","title":"VersionComponent","text":"<pre><code>VersionComponent(\n    values: Optional[list] = None,\n    optional_value: Optional[str] = None,\n    first_value: Union[str, int, None] = None,\n    independent: bool = False,\n    always_increment: bool = False,\n    calver_format: Optional[str] = None,\n    source: Optional[str] = None,\n    value: Union[str, int, None] = None,\n)\n</code></pre> <p>Represent part of a version number.</p> <p>Determines the PartFunction that rules how the part behaves when increased or reset based on the configuration given.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent-attributes","title":"Attributes","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent.is_independent","title":"is_independent  <code>property</code>","text":"<pre><code>is_independent: bool\n</code></pre> <p>Is the part independent of the other parts?</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent.is_optional","title":"is_optional  <code>property</code>","text":"<pre><code>is_optional: bool\n</code></pre> <p>Is the part optional?</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent.value","title":"value  <code>property</code>","text":"<pre><code>value: str\n</code></pre> <p>Return the value of the part.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent.bump","title":"bump","text":"<pre><code>bump() -&gt; 'VersionComponent'\n</code></pre> <p>Return a part with bumped value.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent.copy","title":"copy","text":"<pre><code>copy() -&gt; 'VersionComponent'\n</code></pre> <p>Return a copy of the part.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponent.null","title":"null","text":"<pre><code>null() -&gt; 'VersionComponent'\n</code></pre> <p>Return a part with first value.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec","title":"VersionComponentSpec","text":"<p>               Bases: <code>BaseModel</code></p> <p>Configuration of a version component.</p> <p>This is used to read in the configuration from the bumpversion config file.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec-attributes","title":"Attributes","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.always_increment","title":"always_increment  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>always_increment: bool = False\n</code></pre> <p>Should the component always increment, even if it is not necessary?</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.calver_format","title":"calver_format  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>calver_format: Optional[str] = None\n</code></pre> <p>The format string for a CalVer component.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.depends_on","title":"depends_on  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>depends_on: Optional[str] = None\n</code></pre> <p>The name of the component this component depends on.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.first_value","title":"first_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>first_value: Union[str, int, None] = None\n</code></pre> <p>The first value to increment from.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.independent","title":"independent  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>independent: bool = False\n</code></pre> <p>Is the component independent of the other components?</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.optional_value","title":"optional_value  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>optional_value: Optional[str] = None\n</code></pre> <p>The value that is optional to include in the version.</p> <ul> <li>Defaults to first value in values or 0 in the case of numeric.</li> <li>Empty string means nothing is optional.</li> <li>CalVer components ignore this.</li> </ul>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.values","title":"values  <code>class-attribute</code> <code>instance-attribute</code>","text":"<pre><code>values: Optional[list] = None\n</code></pre> <p>The possible values for the component. If it and <code>calver_format</code> is None, the component is numeric.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.create_component","title":"create_component","text":"<pre><code>create_component(\n    value: Union[str, int, None] = None\n) -&gt; VersionComponent\n</code></pre> <p>Generate a version component from the configuration.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionComponentSpec.set_always_increment_with_calver","title":"set_always_increment_with_calver  <code>classmethod</code>","text":"<pre><code>set_always_increment_with_calver(data: Any) -&gt; Any\n</code></pre> <p>Set always_increment to True if calver_format is present.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionSpec","title":"VersionSpec","text":"<pre><code>VersionSpec(\n    components: Dict[str, VersionComponentSpec],\n    order: Optional[List[str]] = None,\n)\n</code></pre> <p>The specification of a version\u2019s components and their relationships.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionSpec-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionSpec.create_version","title":"create_version","text":"<pre><code>create_version(values: Dict[str, str]) -&gt; 'Version'\n</code></pre> <p>Generate a version from the given values.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models.VersionSpec.get_dependents","title":"get_dependents","text":"<pre><code>get_dependents(component_name: str) -&gt; List[str]\n</code></pre> <p>Return the parts that depend on the given part.</p>"},{"location":"reference/api/bumpversion/versioning/models/#bumpversion.versioning.models-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/serialization/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> serialization","text":"<p>Functions for serializing and deserializing version objects.</p>"},{"location":"reference/api/bumpversion/versioning/serialization/#bumpversion.versioning.serialization-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/versioning/serialization/#bumpversion.versioning.serialization-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/serialization/#bumpversion.versioning.serialization.multisort","title":"multisort","text":"<pre><code>multisort(xs: list, specs: tuple) -&gt; list\n</code></pre> <p>Sort a list of dictionaries by multiple keys.</p> <p>From https://docs.python.org/3/howto/sorting.html#sort-stability-and-complex-sorts</p> <p>Parameters:</p> <code>xs</code> <p>The list of dictionaries to sort</p> <p> TYPE: <code>list</code> </p> <code>specs</code> <p>A tuple of (key, reverse) pairs</p> <p> TYPE: <code>tuple</code> </p> <p>Returns:</p> <code>list</code> <p>The sorted list</p>"},{"location":"reference/api/bumpversion/versioning/serialization/#bumpversion.versioning.serialization.parse_version","title":"parse_version","text":"<pre><code>parse_version(\n    version_string: str, parse_pattern: str\n) -&gt; Dict[str, str]\n</code></pre> <p>Parse a version string into a dictionary of the parts and values using a regular expression.</p> <p>Parameters:</p> <code>version_string</code> <p>Version string to parse</p> <p> TYPE: <code>str</code> </p> <code>parse_pattern</code> <p>The regular expression pattern to use for parsing</p> <p> TYPE: <code>str</code> </p> <p>Returns:</p> <code>Dict[str, str]</code> <p>A dictionary of version part labels and their values, or an empty dictionary</p> <code>Dict[str, str]</code> <p>if the version string doesn\u2019t match.</p> <p>Raises:</p> <code>BumpVersionError</code> <p>If the parse_pattern is not a valid regular expression</p>"},{"location":"reference/api/bumpversion/versioning/serialization/#bumpversion.versioning.serialization.serialize","title":"serialize","text":"<pre><code>serialize(\n    version: Version,\n    serialize_patterns: List[str],\n    context: MutableMapping,\n) -&gt; str\n</code></pre> <p>Attempts to serialize a version with the given serialization format.</p> <ul> <li>valid serialization patterns are those that are renderable with the given context</li> <li>formats that contain all required components are preferred</li> <li>the shortest valid serialization pattern is used</li> <li>if two patterns are equally short, the first one is used</li> <li>if no valid serialization pattern is found, an error is raised</li> </ul> <p>Parameters:</p> <code>version</code> <p>The version to serialize</p> <p> TYPE: <code>Version</code> </p> <code>serialize_patterns</code> <p>The serialization format to use, using Python\u2019s format string syntax</p> <p> TYPE: <code>List[str]</code> </p> <code>context</code> <p>The context to use when serializing the version</p> <p> TYPE: <code>MutableMapping</code> </p> <p>Raises:</p> <code>FormattingError</code> <p>if a serialization pattern</p> <p>Returns:</p> <code>str</code> <p>The serialized version as a string</p>"},{"location":"reference/api/bumpversion/versioning/version_config/","title":"<code class=\"doc-symbol doc-symbol-nav doc-symbol-module\"></code> version_config","text":"<p>Module for managing Versions and their internal parts.</p>"},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config-classes","title":"Classes","text":""},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config.VersionConfig","title":"VersionConfig","text":"<pre><code>VersionConfig(\n    parse: str,\n    serialize: Tuple[str],\n    search: str,\n    replace: str,\n    part_configs: Optional[\n        Dict[str, VersionComponentSpec]\n    ] = None,\n)\n</code></pre> <p>Hold a complete representation of a version string.</p>"},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config.VersionConfig-attributes","title":"Attributes","text":""},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config.VersionConfig.order","title":"order  <code>property</code>","text":"<pre><code>order: List[str]\n</code></pre> <p>Return the order of the labels in a serialization format.</p> <p>Currently, order depends on the first given serialization format. This seems like a good idea because this should be the most complete format.</p> <p>Returns:</p> <code>List[str]</code> <p>A list of version part labels in the order they should be rendered.</p>"},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config.VersionConfig-functions","title":"Functions","text":""},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config.VersionConfig.parse","title":"parse","text":"<pre><code>parse(\n    version_string: Optional[str] = None,\n    raise_error: bool = False,\n) -&gt; Optional[Version]\n</code></pre> <p>Parse a version string into a Version object.</p> <p>Parameters:</p> <code>version_string</code> <p>Version string to parse</p> <p> TYPE: <code>Optional[str]</code> </p><p> DEFAULT: <code>None</code> </p> <code>raise_error</code> <p>Raise an exception if a version string is invalid</p> <p> TYPE: <code>bool</code> </p><p> DEFAULT: <code>False</code> </p> <p>Returns:</p> <code>Optional[Version]</code> <p>A Version object representing the string.</p> <p>Raises:</p> <code>BumpversionException</code> <p>If a version string is invalid and raise_error is True.</p>"},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config.VersionConfig.serialize","title":"serialize","text":"<pre><code>serialize(version: Version, context: MutableMapping) -&gt; str\n</code></pre> <p>Serialize a version to a string.</p> <p>Parameters:</p> <code>version</code> <p>The version to serialize</p> <p> TYPE: <code>Version</code> </p> <code>context</code> <p>The context to use when serializing the version</p> <p> TYPE: <code>MutableMapping</code> </p> <p>Returns:</p> <code>str</code> <p>The serialized version as a string</p>"},{"location":"reference/api/bumpversion/versioning/version_config/#bumpversion.versioning.version_config-functions","title":"Functions","text":""},{"location":"reference/configuration/","title":"Configuration","text":"<p>Bump My Version looks in three places for configuration information (in order of precedence):</p> <ol> <li>command line</li> <li>configuration file</li> <li>environment variables</li> </ol>"},{"location":"reference/configuration/#configuration-files","title":"Configuration files","text":"<p>Bump My Version looks in four places for the configuration file to parse (in order of precedence):</p> <ol> <li><code>--config-file &lt;FILE&gt;</code> (command line argument)</li> <li><code>BUMPVERSION_CONFIG_FILE=file</code> (environment variable)</li> <li><code>.bumpversion.cfg</code> (legacy)</li> <li><code>.bumpversion.toml</code></li> <li><code>setup.cfg</code> (legacy)</li> <li><code>pyproject.toml</code></li> </ol> <p><code>.toml</code> files are recommended. We will likely drop support for <code>ini</code>-style formats in the future. You should add your configuration file to your source code management system.</p> <p>By using a configuration file, you no longer need to specify those options on the command line. The configuration file also allows greater flexibility in specifying how files are modified.</p>"},{"location":"reference/configuration/#configuration-sections","title":"Configuration sections","text":"<ul> <li>Global</li> <li>Version Component</li> <li>File</li> </ul>"},{"location":"reference/configuration/file/","title":"File-specific configuration","text":"<p>This section configures which files Bump My Version should update by replacing their current version with the newly bumped version.</p>"},{"location":"reference/configuration/file/#filename","title":"filename","text":"required Yes\u2021 default empty type string <p>The name of the file to modify.</p> <p>Note</p> <p>\u2021 This is only used with TOML configuration and is only required if <code>glob</code> is not specified. INI-style configuration files specify the file name as part of the grouping.</p>"},{"location":"reference/configuration/file/#glob","title":"glob","text":"required Yes\u2021 default empty type string <p>The glob pattern specifying the files to modify.</p> <p>Note</p> <p>\u2021 This is only used with TOML configuration, and is only required if <code>filename</code> is not specified. INI-style configuration files specify the glob pattern as part of the grouping.</p>"},{"location":"reference/configuration/file/#glob_exclude","title":"glob_exclude","text":"required No default empty type list of string <p>A list of glob patterns to exclude from the files found via the <code>glob</code> parameter. Does nothing if <code>filename</code> is specified.</p>"},{"location":"reference/configuration/file/#parse","title":"parse","text":"required No default the value configured in the global <code>parse</code> field type string <p>This is an override to the default pattern to parse the version number from this file.</p>"},{"location":"reference/configuration/file/#serialize","title":"serialize","text":"required No default the value configured in the global <code>serialize</code> field type an array of strings <p>This is an override to the default templates to serialize the new version number in this file.</p>"},{"location":"reference/configuration/file/#search","title":"search","text":"required No default the value configured in the global <code>search</code> field type string <p>This is an override to the default template string how to search for the string to be replaced in the file.</p>"},{"location":"reference/configuration/file/#regex","title":"regex","text":"required No default the value configured in the global <code>regex</code> field type boolean <p>If <code>True</code>, treat the <code>search</code> parameter as a regular expression.</p>"},{"location":"reference/configuration/file/#replace","title":"replace","text":"required No default the value configured in the global <code>replace</code> field type string <p>This is an override to the template to create the string that will replace the current version number in the file.</p>"},{"location":"reference/configuration/file/#ignore_missing_version","title":"ignore_missing_version","text":"required No default The value configured in the global <code>ignore_missing_version</code> field type boolean <p>If <code>True</code>, don\u2019t fail if the version string to be replaced is not found in the file.</p>"},{"location":"reference/configuration/file/#ignore_missing_file","title":"ignore_missing_file","text":"required No default The value configured in the global <code>ignore_missing_file</code> field type boolean <p>if <code>True</code>, don\u2019t fail if the configured file is missing.</p>"},{"location":"reference/configuration/file/#include_bumps","title":"include_bumps","text":"required No default all version components type list of strings <p>The <code>include_bumps</code> file configuration allows you to control when bump-my-version includes this file for changes. Its alternative is the <code>exclude_bumps</code> configuration. When a <code>bump &lt;version component&gt;</code> command is issued, this file is changed only if the version component is in this list and not in <code>exclude_bumps</code>. The parse configuration defines version components.</p> <p>The default value, or an empty list, includes all version components.</p>"},{"location":"reference/configuration/file/#exclude_bumps","title":"exclude_bumps","text":"required No default <code>[]</code> type list of strings <p>The <code>exclude_bumps</code> file configuration allows you to control when bump-my-version excludes this file for changes. Its alternative is the <code>include_bumps</code> configuration. When a <code>bump &lt;version component&gt;</code> command is issued, this file is only changed if the version component is not in this list. The parse configuration defines version components.</p> <p>The default value does not exclude anything.</p>"},{"location":"reference/configuration/file/#examples","title":"Examples","text":"TOMLCFG <p>TOML allows us to specify the files using an array of tables. TOML configuration adds two fields to each file configuration: <code>filename</code> and <code>glob</code>. These fields are mutually exclusive: if you specify a value for both, only the <code>glob</code> value is used.</p> <p>For example, to change <code>coolapp/__init__.py</code> with the defaults and alter <code>CHANGELOG.md</code> twice:</p> <pre><code>[[tool.bumpversion.files]]\nfilename = \"coolapp/__init__.py\"\n\n[[tool.bumpversion.files]]\nfilename = \"CHANGELOG.md\"\nsearch = \"Unreleased\"\n\n[[tool.bumpversion.files]]\nfilename = \"CHANGELOG.md\"\nsearch = \"{current_version}...HEAD\"\nreplace = \"{current_version}...{new_version}\"\n</code></pre> <p>INI-style configuration is in the section: <code>[bumpversion:file:&lt;filename&gt;]</code> or <code>[bumpversion:glob:&lt;glob pattern&gt;]</code>.</p> <p>Both, <code>file:</code> and <code>glob:</code> are configured the same. Their difference is that file will match file names directly like <code>requirements.txt</code>. While glob also matches multiple files via wildcards like <code>**/pom.xml</code>.</p> <p>Note</p> <p>The configuration file format requires each section header to be unique. If you want to process a certain file multiple times, you may append a description between parens to the <code>file</code> keyword: <code>[bumpversion:file (special one):\u2026]</code>.</p> <p>For example, to change <code>coolapp/__init__.py</code> with the defaults and alter <code>CHANGELOG.md</code> twice:</p> <pre><code>[bumpversion:file:coolapp/__init__.py]\n\n[bumpversion:file(version heading):CHANGELOG.md]\nsearch = Unreleased\n\n[bumpversion:file(previous version):CHANGELOG.md]\nsearch = {current_version}...HEAD\nreplace = {current_version}...{new_version}\n</code></pre>"},{"location":"reference/configuration/global/","title":"Global Configuration","text":"<p>The general configuration is grouped in a <code>[tool.bumpversion]</code> or  <code>[bumpversion]</code> section, depending on if it is a TOML or INI file, respectfully.</p>"},{"location":"reference/configuration/global/#allow_dirty","title":"allow_dirty","text":"required No default <code>False</code> type boolean command line option <code>--allow-dirty | --no-allow-dirty</code> environment var <code>BUMPVERSION_ALLOW_DIRTY</code> <p>Bump-my-version\u2019s default behavior is to abort if the working directory has uncommitted changes. This protects you from releasing unversioned files and overwriting unsaved changes.</p>"},{"location":"reference/configuration/global/#commit","title":"commit","text":"required No default <code>False</code> (Don\u2019t create a commit) type boolean command line option <code>--commit | --no-commit</code> environment var <code>BUMPVERSION_COMMIT</code> <p>Whether to create a commit using git or Mercurial.</p> <p>If you have pre-commit hooks, add an option to <code>commit_args</code> to turn off your pre-commit hooks. For Git, use <code>--no-verify</code> and use <code>--config hooks.pre-commit=</code> for Mercurial.</p>"},{"location":"reference/configuration/global/#commit_args","title":"commit_args","text":"required No default <code>\"\"</code> type string command line option <code>--commit-args</code> environment var <code>BUMPVERSION_COMMIT_ARGS</code> <p>Extra arguments to pass to commit command. This is only used when the <code>commit</code> option is set to <code>True</code>.</p> <p>If you have pre-commit hooks, add an option to turn off your pre-commit hooks. For Git, use <code>--no-verify</code> and use <code>--config hooks.pre-commit=</code> for Mercurial.</p>"},{"location":"reference/configuration/global/#current_version","title":"current_version","text":"required Yes default <code>\"\"</code> type string command line option <code>--current-version</code> environment var <code>BUMPVERSION_CURRENT_VERSION</code> <p>The current version of the software package before bumping. A value for this is required.</p>"},{"location":"reference/configuration/global/#ignore_missing_files","title":"ignore_missing_files","text":"required No default <code>False</code> type boolean command line option <code>--ignore-missing-files</code> environment var <code>BUMPVERSION_IGNORE_MISSING_FILES</code> <p>If <code>True</code>, don\u2019t fail if the configured file is missing.</p>"},{"location":"reference/configuration/global/#ignore_missing_version","title":"ignore_missing_version","text":"required No default <code>False</code> type boolean command line option <code>--ignore-missing-version</code> environment var <code>BUMPVERSION_IGNORE_MISSING_VERSION</code> <p>If <code>True</code>, don\u2019t fail if the version string to be replaced is not found in the file.</p>"},{"location":"reference/configuration/global/#message","title":"message","text":"required No default <code>Bump version: {current_version} \u2192 {new_version}</code> type string command line option <code>--message</code> environment var <code>BUMPVERSION_MESSAGE</code> <p>The commit message template to use when creating a commit. This is only used when the <code>commit</code> option is set to <code>True</code>.</p> <p>This string is templated using the Python Format String Syntax. The formatting context reference describes the available variables.</p>"},{"location":"reference/configuration/global/#parse","title":"parse","text":"required No default <code>(?P&lt;major&gt;\\d+)\\.(?P&lt;minor&gt;\\d+)\\.(?P&lt;patch&gt;\\d+)</code> type string command line option <code>--parse</code> environment var <code>BUMPVERSION_PARSE</code> <p>This is the default regular expression (Python regular expression syntax) for finding and parsing the version string into its components. Individual part or file configurations may override this.</p> <p>The regular expression must be able to parse all strings produced by the configured <code>serialize</code> value. Named matching groups (\u201c<code>(?P&lt;name&gt;...)</code>\u201d) indicate the version part the matched value belongs to.</p>"},{"location":"reference/configuration/global/#regex","title":"regex","text":"required No default <code>False</code> type boolean command line option <code>--regex | --no-regex</code> environment var <code>BUMPVERSION_REGEX</code> <p>Treat the <code>search</code> string as a regular expression.</p>"},{"location":"reference/configuration/global/#replace","title":"replace","text":"required No default <code>{new_version}</code> type string command line option <code>--replace</code> environment var <code>BUMPVERSION_REPLACE</code> <p>This is the template to create the string that will replace the current version number in the file.</p>"},{"location":"reference/configuration/global/#search","title":"search","text":"required No default <code>{current_version}</code> type string command line option <code>--search</code> environment var <code>BUMPVERSION_SEARCH</code> <p>This is the template string for searching. It is rendered using the formatting context for searching in the file. Individual file configurations may override this. This can span multiple lines and is templated using Python Format String Syntax. The formatting context reference describes the available variables.</p> <p>This is useful if there is the remotest possibility that the current version number might be present multiple times in the file and you mean to bump only one of the occurrences.</p>"},{"location":"reference/configuration/global/#serialize","title":"serialize","text":"required No default <code>[\"{major}.{minor}.{patch}\"]</code> type an array of strings command line option <code>--serialize</code> environment var <code>BUMPVERSION_SERIALIZE</code> <p>This is the default list of templates specifying how to serialize the version parts back to a version string. Individual part or file configurations may override this.</p> <p>Since version parts can be optional, bumpversion will try the serialization formats beginning with the first and choose the last one where all values can all non-optional values are represented.</p> <p>In this example (in TOML):</p> <pre><code>serialize = [\n    \"{major}.{minor}.{patch}\",\n    \"{major}.{minor}\",\n    \"{major}\"\n]\n</code></pre> <p>Since <code>0</code> is optional by default, Version <code>1.8.9</code> will serialize to  <code>1.8.9</code>, <code>1.9.0</code> will serialize to <code>1.9</code>, and version <code>2.0.0</code> will serialize as <code>2</code>. </p> <p>Each string is templated using the Python Format String Syntax. The formatting context reference describes the available variables.</p>"},{"location":"reference/configuration/global/#sign_tags","title":"sign_tags","text":"required No default <code>False</code> (Don\u2019t sign tags) type boolean command line option <code>--sign-tags | --no-sign-tags</code> environment var <code>BUMPVERSION_SIGN_TAGS</code> <p>If <code>True</code>, sign the created tag, when <code>tag</code> is <code>True</code>.</p>"},{"location":"reference/configuration/global/#tag","title":"tag","text":"required No default <code>False</code> (Don\u2019t create a tag) type boolean command line option <code>--tag | --no-tag</code> environment var <code>BUMPVERSION_TAG</code> <p>If <code>True</code>, create a tag after committing the changes. The tag is named using the <code>tag_name</code> option. </p> <p>If you are using <code>git</code>, don\u2019t forget to <code>git-push</code> with the <code>--tags</code> flag when you are done.</p>"},{"location":"reference/configuration/global/#tag_message","title":"tag_message","text":"required No default <code>Bump version: {current_version} \u2192 {new_version}</code> type string command line option <code>--tag-message</code> environment var <code>BUMPVERSION_TAG_MESSAGE</code> <p>The tag message template to use when creating a tag when <code>tag</code> is <code>True</code></p> <p>This string is templated using the Python Format String Syntax. The formatting context reference describes the available variables.</p> <p>Bump My Version creates an annotated tag in Git by default. To turn this off and create a lightweight tag, you must explicitly set an empty <code>tag_message</code> value.</p>"},{"location":"reference/configuration/global/#tag_name","title":"tag_name","text":"required No default <code>v{new_version}</code> type string command line option <code>--tag-name</code> environment var <code>BUMPVERSION_TAG_NAME</code> <p>The template used to render the tag when <code>tag</code> is <code>True</code>.</p> <p>This string is templated using the Python Format String Syntax. The formatting context reference describes the available variables.</p>"},{"location":"reference/configuration/global/#examples","title":"Examples","text":"TOMLCFG <pre><code>[tool.bumpversion]\nallow_dirty = false\ncommit = false\nmessage = \"Bump version: {current_version} \u2192 {new_version}\"\ncommit_args = \"\"\ntag = false\nsign_tags = false\ntag_name = \"v{new_version}\"\ntag_message = \"Bump version: {current_version} \u2192 {new_version}\"\ncurrent_version = \"1.0.0\"\nparse = \"(?P&lt;major&gt;\\\\d+)\\\\.(?P&lt;minor&gt;\\\\d+)\\\\.(?P&lt;patch&gt;\\\\d+)\"\nserialize = [\n    \"{major}.{minor}.{patch}\"\n]\nsearch = \"{current_version}\"\nreplace = \"{new_version}\"\n</code></pre> <pre><code>[bumpversion]\nallow_dirty = False\ncommit = False\nmessage = Bump version: {current_version} \u2192 {new_version}\ncommit_args = \ntag = False\nsign_tags = False\ntag_name = v{new_version}\ntag_message = Bump version: {current_version} \u2192 {new_version}\ncurrent_version = 1.0.0\nparse = (?P&lt;major&gt;\\d+)\\.(?P&lt;minor&gt;\\d+)\\.(?P&lt;patch&gt;\\d+)\nserialize =\n    {major}.{minor}.{patch}\nsearch = {current_version}\nreplace = {new_version}\n</code></pre>"},{"location":"reference/configuration/version-component/","title":"Version component-specific configuration","text":"<p>Version component configuration is grouped in a <code>[tool.bumpversion.parts.&lt;partname&gt;]</code> or  <code>[bumpversion:part:&lt;partname&gt;]</code> section, depending on if it is a TOML or INI file, respectfully.</p> <p>You only need to configure version parts if they deviate from the default, and then you only need to specify the overridden options.</p>"},{"location":"reference/configuration/version-component/#values","title":"values","text":"required No default numeric (i.e. <code>0</code>, <code>1</code>, <code>2</code>, \u2026) type array of strings <p>An explicit list of all values to iterate through when bumping this part. An empty array is treated as indicating <code>numeric</code> values.</p>"},{"location":"reference/configuration/version-component/#optional_value","title":"optional_value","text":"required No default The first entry in <code>values</code>, <code>0</code> when using numeric values type string <p>When the version part matches this value, it is considered optional when serializing the final version string.</p> <p>Note</p> <p>Numeric values are still treated as strings internally, so when specifying an optional value, you must use a string.</p>"},{"location":"reference/configuration/version-component/#first_value","title":"first_value","text":"required No default The first entry in <code>values</code>, <code>0</code> when using numeric values type string <p>When the part is reset, the value will be set to the value specified here.</p> <p>Note</p> <p>Numeric values are still treated as strings internally, so when specifying a first value, you must use a string.</p>"},{"location":"reference/configuration/version-component/#independent","title":"independent","text":"required No default <code>False</code> type boolean <p>When this value is set to <code>True</code>, the part is not reset when other parts are incremented. Its incrementation is independent of the other parts. It is useful when you have a build number in your version that is incremented independently of the actual version.</p>"},{"location":"reference/configuration/version-component/#always_increment","title":"always_increment","text":"required No default <code>False</code> (<code>True</code> if <code>calver_format</code> is set) type boolean <p>When this value is set to <code>True</code>, the part is always incremented when the version is bumped, regardless of the target part.</p>"},{"location":"reference/configuration/version-component/#calver_format","title":"calver_format","text":"required No default empty type string <p>The <code>calver_format</code> is a string that specifies the format of the version part. It is used to determine the next value when bumping the version. The format is a string that uses the placeholders defined in the CalVer reference.</p>"},{"location":"reference/configuration/version-component/#examples","title":"Examples","text":"TOMLCFG <pre><code>[tool.bumpversion.parts.release]\nvalues = [\n    \"alpha\",\n    \"beta\",\n    \"gamma\"\n]\noptional_value = \"gamma\"\n</code></pre> <pre><code>[bumpversion:part:release]\noptional_value = gamma\nvalues =\n    alpha\n    beta\n    gamma\n</code></pre>"},{"location":"tutorials/getting-started/","title":"Getting Started","text":""},{"location":"tutorials/getting-started/#installation","title":"Installation","text":"<p>You can download and install the latest version of this software from the Python package index (PyPI) as follows:</p> <pre><code>pip install --upgrade bump-my-version\n</code></pre>"},{"location":"tutorials/getting-started/#create-a-default-configuration","title":"Create a default configuration","text":"<p>The default configuration uses a simplified version of semantic versioning.</p> <p>Note</p> <p>Python projects can use <code>pyproject.toml</code> as the <code>--destination</code> of the sample config. </p> Generating a default configuration<pre><code>$ bump-my-version sample-config --no-prompt --destination .bumpversion.toml\n$ cat .bumpversion.toml\n[tool.bumpversion]\ncurrent_version = \"0.1.0\"\nparse = \"(?P&lt;major&gt;\\\\d+)\\\\.(?P&lt;minor&gt;\\\\d+)\\\\.(?P&lt;patch&gt;\\\\d+)\"\nserialize = [\"{major}.{minor}.{patch}\"]\nsearch = \"{current_version}\"\nreplace = \"{new_version}\"\nregex = false\nignore_missing_version = false\ntag = false\nsign_tags = false\ntag_name = \"v{new_version}\"\ntag_message = \"Bump version: {current_version} \u2192 {new_version}\"\nallow_dirty = false\ncommit = false\nmessage = \"Bump version: {current_version} \u2192 {new_version}\"\ncommit_args = \"\"\n</code></pre>"},{"location":"tutorials/getting-started/#visualize-the-versioning-path","title":"Visualize the versioning path","text":"<p>You can see the potential versioning paths with the <code>show-bump</code> subcommand. This visualization will help debug any versioning logic you implement.</p> Showing the potential versioning path<pre><code>$ bump-my-version show-bump\n0.1.0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 1.0.0\n               \u251c\u2500 minor \u2500 0.2.0\n               \u2570\u2500 patch \u2500 0.1.1\n</code></pre> <p>You can also pass in a specific version to see how bumping that version would work.</p> Showing the potential versioning path from a specific version<pre><code>$ bump-my-version show-bump 1.2.3\n1.2.3 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 2.0.0\n               \u251c\u2500 minor \u2500 1.3.0\n               \u2570\u2500 patch \u2500 1.2.4\n</code></pre>"},{"location":"tutorials/getting-started/#configure-a-file-to-modify-when-bumping","title":"Configure a file to modify when bumping","text":"<p>Let\u2019s say your version is stored in a file named <code>VERSION</code>. Every time you bump your version, that file needs to change.</p> <p>Create the <code>VERSION</code> file with the current version <code>0.1.0</code>:</p> Create a VERSION file<pre><code>$ echo \"0.1.0\" &gt;&gt; VERSION\n</code></pre> <p>Add the following to the <code>.bumpversion.toml</code> file.</p> .bumpversion.toml<pre><code>[[tool.bumpversion.files]]\nfilename = \"VERSION\"\n</code></pre> <p>Now bump-my-version will look in the <code>VERSION</code> file for the current version in that file and replace it with the new version on each <code>bump-my-version bump</code> command.</p>"},{"location":"tutorials/getting-started/#seeing-what-would-happen-with-dry-run","title":"Seeing what would happen with dry-run","text":"<p>You will increment the version using the <code>bump</code> subcommand. You \u201cbump\u201d a specific segment of the version. These segments are defined in the <code>parse</code> configuration. In this configuration (<code>(?P&lt;major&gt;\\\\d+)\\\\.(?P&lt;minor&gt;\\\\d+)\\\\.(?P&lt;patch&gt;\\\\d+)</code>) the segments are <code>major</code>, <code>minor</code>, <code>patch</code>.</p> <p>The <code>--dry-run</code> option will explain all the steps it performs without permanent changes. Use the <code>-vv</code> option to get the full description for debugging later.</p> <p>Note</p> <p>If you are in a Git or Mercurial repository, you may see additional messages.</p> Incrementing the minor segment<pre><code>$ bump-my-version bump minor --dry-run -vv\nStarting BumpVersion 0.25.1\nReading configuration\n  Reading config file: /users/gettingstarted/.bumpversion.toml\n  Parsing current version '0.1.0'\n    Parsing version '0.1.0' using regexp '(?P&lt;major&gt;\\d+)\\.(?P&lt;minor&gt;\\d+)\\.(?P&lt;patch&gt;\\d+)'\n      Parsed the following values: major=0, minor=1, patch=0\n  Attempting to increment part 'minor'\n    Values are now: major=0, minor=2, patch=0\n  Serializing version '&lt;bumpversion.Version:major=0, minor=2, patch=0&gt;'\n    Using serialization format '{major}.{minor}.{patch}'\n    Serialized to '0.2.0'\n  New version will be '0.2.0'\nDry run active, won't touch any files.\n\nFile VERSION: replace `{current_version}` with `{new_version}`\n  Serializing the current version\n    Serializing version '&lt;bumpversion.Version:major=0, minor=1, patch=0&gt;'\n      Using serialization format '{major}.{minor}.{patch}'\n      Serialized to '0.1.0'\n  Serializing the new version\n    Serializing version '&lt;bumpversion.Version:major=0, minor=2, patch=0&gt;'\n      Using serialization format '{major}.{minor}.{patch}'\n      Serialized to '0.2.0'\n  Rendering search pattern with context\n    No RegEx flag detected. Searching for the default pattern: '0\\.1\\.0'\n  Found '0\\.1\\.0' at line 1: 0.1.0\n  Would change file VERSION:\n    *** before VERSION\n    --- after VERSION\n    ***************\n    *** 1 ****\n    ! 0.1.0\n    --- 1 ----\n    ! 0.2.0\n\nProcessing config file: /users/gettingstarted/.bumpversion.toml\n  Serializing version '&lt;bumpversion.Version:major=0, minor=1, patch=0&gt;'\n    Using serialization format '{major}.{minor}.{patch}'\n    Serialized to '0.1.0'\n  Serializing version '&lt;bumpversion.Version:major=0, minor=2, patch=0&gt;'\n    Using serialization format '{major}.{minor}.{patch}'\n    Serialized to '0.2.0'\n  Rendering search pattern with context\n    No RegEx flag detected. Searching for the default pattern: '0\\.1\\.0'\n  Found '0\\.1\\.0' at line 1: 0.1.0\n  Would change file /users/gettingstarted/.bumpversion.toml:tool.bumpversion.current_version:\n    *** before /users/gettingstarted/.bumpversion.toml:tool.bumpversion.current_version\n    --- after /users/gettingstarted/.bumpversion.toml:tool.bumpversion.current_version\n    ***************\n    *** 1 ****\n    ! 0.1.0\n    --- 1 ----\n    ! 0.2.0\nDone.\n</code></pre>"},{"location":"tutorials/nav/","title":"Nav","text":"<ul> <li>Getting Started</li> <li>Semantic Versioning</li> </ul>"},{"location":"tutorials/semantic-versioning-example/","title":"Semantic Versioning","text":""},{"location":"tutorials/semantic-versioning-example/#create-a-default-configuration","title":"Create a default configuration","text":"<p>The default configuration uses a simplified version of semantic versioning.</p> Generating a default configuration<pre><code>$ bump-my-version sample-config --no-prompt --destination .bumpversion.toml\n$ cat .bumpversion.toml\n[tool.bumpversion]\ncurrent_version = \"0.1.0\"\nparse = \"(?P&lt;major&gt;\\\\d+)\\\\.(?P&lt;minor&gt;\\\\d+)\\\\.(?P&lt;patch&gt;\\\\d+)\"\nserialize = [\"{major}.{minor}.{patch}\"]\nsearch = \"{current_version}\"\nreplace = \"{new_version}\"\nregex = false\nignore_missing_version = false\ntag = false\nsign_tags = false\ntag_name = \"v{new_version}\"\ntag_message = \"Bump version: {current_version} \u2192 {new_version}\"\nallow_dirty = false\ncommit = false\nmessage = \"Bump version: {current_version} \u2192 {new_version}\"\ncommit_args = \"\"\n</code></pre>"},{"location":"tutorials/semantic-versioning-example/#visualize-the-versioning-path","title":"Visualize the versioning path","text":"<p>You can see the potential versioning paths with the <code>show-bump</code> subcommand.</p> Showing the potential versioning path<pre><code>$ bump-my-version show-bump\n0.1.0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 1.0.0\n               \u251c\u2500 minor \u2500 0.2.0\n               \u2570\u2500 patch \u2500 0.1.1\n$ bump-my-version show-bump 1.2.3\n1.2.3 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 2.0.0\n               \u251c\u2500 minor \u2500 1.3.0\n               \u2570\u2500 patch \u2500 1.2.4\n</code></pre> <p>The default configuration only allows bumping the major, minor, or patch version. What if you wanted to support pre-release versions?</p>"},{"location":"tutorials/semantic-versioning-example/#add-support-for-pre-release-versions","title":"Add support for pre-release versions","text":"<p>Alter the <code>parse</code> configuration to support pre-release versions. This <code>parse</code> option uses an extended (or verbose) regular expression to extract the version components from the current version. </p> New parse configuration<pre><code>parse = \"\"\"(?x)\n    (?P&lt;major&gt;0|[1-9]\\\\d*)\\\\.\n    (?P&lt;minor&gt;0|[1-9]\\\\d*)\\\\.\n    (?P&lt;patch&gt;0|[1-9]\\\\d*)\n    (?:\n        -                             # dash separator for pre-release section\n        (?P&lt;pre_l&gt;[a-zA-Z-]+)         # pre-release label\n        (?P&lt;pre_n&gt;0|[1-9]\\\\d*)        # pre-release version number\n    )?                                # pre-release section is optional\n\"\"\"\n</code></pre> <p>Alter the <code>serialize</code> configuration to support pre-release versions.</p> New serialize configuration<pre><code>serialize = [\n    \"{major}.{minor}.{patch}-{pre_l}{pre_n}\",\n    \"{major}.{minor}.{patch}\",\n]\n</code></pre> <p>Add a new configuration section for the <code>pre_l</code> part.</p> New pre_l configuration<pre><code>[tool.bumpversion.parts.pre_l]\nvalues = [\"dev\", \"rc\", \"final\"]\noptional_value = \"final\"\n</code></pre>"},{"location":"tutorials/semantic-versioning-example/#visualize-the-new-versioning-path","title":"Visualize the new versioning path","text":"<p>Now when you run <code>bump-my-version show-bump</code>, you can see the new pre-release versioning path.</p> Showing the new versioning path<pre><code>$ bump-my-version show-bump\n0.1.0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 1.0.0-dev0\n               \u251c\u2500 minor \u2500 0.2.0-dev0\n               \u251c\u2500 patch \u2500 0.1.1-dev0\n               \u251c\u2500 pre_l \u2500 invalid: The part has already the maximum value among ['dev', 'rc', 'final'] and cannot be bumped.\n               \u2570\u2500 pre_n \u2500 0.1.0-final1\n</code></pre> <p>The <code>pre_l</code> is not bump-able because it is already at the maximum value. The <code>pre_n</code> is bump-able because it is not at the maximum value.</p> <p>If we run <code>bump-my-version show-bump 1.0.0-dev0</code>, we can see the new versioning path for a <code>dev</code> starting version.</p> Showing the new versioning path for a dev version<pre><code>$ bump-my-version show-bump 1.0.0-dev0\n1.0.0-dev0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 2.0.0-dev0\n                    \u251c\u2500 minor \u2500 1.1.0-dev0\n                    \u251c\u2500 patch \u2500 1.0.1-dev0\n                    \u251c\u2500 pre_l \u2500 1.0.0-rc0\n                    \u2570\u2500 pre_n \u2500 1.0.0-dev1\n</code></pre> <p>Finally, we can see the new versioning path for a <code>rc</code> starting version.</p> Showing the new versioning path for an rc version<pre><code>$ bump-my-version show-bump 1.0.0-rc0 \n1.0.0-rc0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 2.0.0-dev0\n                   \u251c\u2500 minor \u2500 1.1.0-dev0\n                   \u251c\u2500 patch \u2500 1.0.1-dev0\n                   \u251c\u2500 pre_l \u2500 1.0.0\n                   \u2570\u2500 pre_n \u2500 1.0.0-rc1\n</code></pre> <p>The full development and release path is:</p> <ul> <li><code>1.0.0</code></li> <li><code>bump patch</code> \u2192 <code>1.0.1-dev0</code></li> <li><code>bump pre_n</code> \u2192 <code>1.0.1-dev1</code></li> <li><code>bump pre_l</code> \u2192 <code>1.0.1-rc0</code></li> <li><code>bump pre_n</code> \u2192 <code>1.0.1-rc1</code></li> <li><code>bump pre_l</code> \u2192 <code>1.0.1</code></li> </ul> <ol> <li>You must decide on the next version before you start developing.</li> <li>Development versions increase using <code>bump-my-version bump pre_n</code>.</li> <li>Switch from development to release candidate using <code>bump-my-version bump pre_l</code>.</li> <li>Release candidates increase using <code>bump-my-version bump pre_n</code>.</li> <li>Switch from the release candidate to the final release using <code>bump-my-version bump pre_l</code>.</li> </ol>"},{"location":"tutorials/semantic-versioning-example/#automate-the-pre-release-numbering","title":"Automate the pre-release numbering","text":"<p>The <code>pre_n</code> or pre-release number is a number that increases with each pre-release. You can automate this my changing the serialization configuration.</p> Serialize configuration with pre_n automation<pre><code>serialize = [\n    \"{major}.{minor}.{patch}-{pre_l}{distance_to_latest_tag}\",\n    \"{major}.{minor}.{patch}\",\n]\n</code></pre> <p>The <code>distance_to_latest_tag</code> is a special value that is replaced with the number of commits since the last tag. This is a good value to use for the <code>pre_n</code> because it will always increase with each commit.</p>"},{"location":"tutorials/semantic-versioning-example/#visualize-the-pre_n-versioning-path","title":"Visualize the pre_n versioning path","text":"<p>Now when you run <code>bump-my-version show-bump</code>, you can see the new pre-release versioning path.</p> Showing the new versioning path with pre_n automation<pre><code>$ bump-my-version show-bump\n0.1.0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 1.0.0-dev0\n               \u251c\u2500 minor \u2500 0.2.0-dev0\n               \u251c\u2500 patch \u2500 0.1.1-dev0\n               \u2570\u2500 pre_l \u2500 invalid: The part has already the maximum value among ['dev', 'rc', 'final'] and cannot be bumped.\n$ bump-my-version show-bump 1.0.0-dev0\n1.0.0-dev0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 2.0.0-dev0\n                    \u251c\u2500 minor \u2500 1.1.0-dev0\n                    \u251c\u2500 patch \u2500 1.0.1-dev0\n                    \u2570\u2500 pre_l \u2500 1.0.0-rc0\n$ bump-my-version show-bump 1.0.0-rc0 \n1.0.0-rc0 \u2500\u2500 bump \u2500\u252c\u2500 major \u2500 2.0.0-dev0\n                   \u251c\u2500 minor \u2500 1.1.0-dev0\n                   \u251c\u2500 patch \u2500 1.0.1-dev0\n                   \u2570\u2500 pre_l \u2500 1.0.0\n</code></pre> <p>The <code>pre_n</code> path is now missing because it is automated.</p> <p>The full development and release path now is:</p> <ul> <li><code>1.0.0</code></li> <li><code>bump patch</code> \u2192 <code>1.0.1-dev0</code><ul> <li>each commit will increase \u2192 <code>1.0.1-dev1</code></li> </ul> </li> <li><code>bump pre_l</code> \u2192 <code>1.0.1-rc0</code><ul> <li>each commit will increase \u2192 <code>1.0.1-rc1</code></li> </ul> </li> <li><code>bump pre_l</code> \u2192 <code>1.0.1</code></li> </ul> <ol> <li>You must decide on the next version before you start developing.</li> <li>Development versions increase automatically with each commit.</li> <li>Switch from development to release candidate using <code>bump-my-version bump pre_l</code>.</li> <li>Release candidate versions increase automatically with each commit.</li> <li>Switch from the release candidate to the final release using <code>bump-my-version bump pre_l</code>.</li> </ol>"}]}